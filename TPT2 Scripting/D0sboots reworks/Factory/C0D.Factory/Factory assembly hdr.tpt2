; Header for the factory assembly
; Used to define the macros I'll be interacting with to make my life easier
;
; Since this is assembling data internally, everything is done within lua macros
{lua(\
  Factory = {}; --[[Global table for C0D.Factory]]\
  --[[/*\
    * Stub function that'll be re-defined in the assembly file\
    * method is used to determine what functionality we're interacting with\
  */]]\
  function Factory.macro_body(method, arg1, arg2, arg3, arg4)\
  end\
)}

; Define an item that's obtained through the craft() action
#craft(name, max_tier, game_name) {lua(\
  Factory.macro_body("craft", "{name}", {max_tier}, "{game_name}");\
)}

; Defines an item that's obtained through the produce() action
#produce(name, max_tier, game_name) {lua(\
  Factory.macro_body("produce", "{name}", {max_tier}, "{game_name}");\
)}

; Defines an item that can't be produced or crafted, but that still exists
#special(name, max_tier, game_name) {lua(\
  Factory.macro_body("special", "{name}", {max_tier}, "{game_name}");\
)}

;
; Define a category to place items inside of
#category(name, default, first, last) {lua(\
  Factory.macro_body("category", "{name}", "{default}", "{first}", "{last}");\
)}
; Hopefully removed in actual script, but needed for testing


;
; Define a group of items that'll be made at once
#group(name, tiers) {lua(Factory.macro_body("group", "{name}", {tiers}))}

;
; Specify the item whose recipe we're defining
#recipe(name) {lua(Factory.macro_body("recipe", "{name}"))}
;
; Define a component of the recipe needed for crafting
#make(tier, name, ammount) {lua(\
  Factory.macro_body("make", "{name}", "{ammount}", "{tier}");\
)}
; Specify the cost in resources it takes to craft that item
#price(price) {lua(Factory.macro_body("add_price", "{price}"))}

;
; Get the item queue ID
#queue(item, tier) {lua(return Factory.macro_body("queue", "{item}", {tier}))}
