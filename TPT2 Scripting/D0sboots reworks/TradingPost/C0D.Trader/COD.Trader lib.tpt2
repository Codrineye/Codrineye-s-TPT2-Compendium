; Keep naming between the trader and benchmarker consistent
; so they're in the same package
#package(name) C0D.Trader:{name}
;

; Impulse macros
#start o
#benchmark b
;
; Import budget exec so we can extend our budget.
:import budget exec_lib

; Variable definitions
;
; Iterations holds the frame at which we're activated.
; This value is important to prevent a unity bug that's explained in Main.
:const string iteration "<size=0>C%t.I"
#iteration.get global.int.get(iteration)
#iteration.set(value) global.int.set(iteration, {value})
;
; Number of loops we want to do in a frame.
:const string loops "C%t.L"
#loops.get global.int.get(loops)
#loops.set(loops) global.int.set(loops, {loops})
;
;
; Status holds the scripts status and it communicates with the user.
; Its name stops the hiding block and it starts an unfinished <color block that gets filled
; when we set it.
:const string status "C%t.S</size><color"
#status.get global.string.get(status)
#status.set(status) global.string.set(status, {status})
