; Import the header file to define the functions and get the macros
:import RNG_manip hdr

; This is the functional RNG manip library
; 
; Every lua variable and function in the global field is part of the global table called RNG

#rng_varType local
; Change this to "global" for debugging

; The 128-bit state of the rng, stored as 128 "1"s and "0"s.
; It is exactly as pathetic as it sounds, but it is actually most efficient to compute
; xor and bitshifting with numbers in string form, because we can do xor via
; precomputed tables and bitshifts become (sub)string manipulation.
; You'd think the same could be done with integers with * and /, but the fact that we only
; have signed integers makes everything too awful.
; This is used by {rng.next} to compute the next state, and {rng.get_int} to convert to a number.
; You can copy this elsewhere and restore it later if you want to simulate
; multiple rng seeds at once.
:{rng_varType} string rng_state

; A temporary variable used during int-to-binary conversion.
; A double is used to avoid issues with the sign bit.
:{rng_varType} double rng_temp

{lua(\
  --[[/*\
    * The structure of code is broken up into multiple lua functions, to allow regular comments\
    * to explain them. Lua functions are used to construct the code, instead of regular macros,\
    * so that we could define our user-visible macros such as {rng.line_1}, {rng.next} etc.\
    * at the top without having to give the full implementation; instead, a stub implementation\
    * was given and the function is re=implemented at the bottom of the file here. This allows us\
    * to use the macros freely in comments, since macros are always expanded, where otherwise we\
    * could not comment on them before they were defined.\
    * As a side benefit, before the full definition takes effect, they will expand to nothing,\
    * which is very fast to evaluate.\
    *\
    * Time to construct our data, starting off with the lookup tables.\
    * The data string is 256 entries, each 23 bytes long:\
    * - 8 bytes for the name suffix of "rng_form"\
    * - 11 bytes for the entire name of the xor table (entries like "0001xor0110")\
    * - 4 bytes for the value of the xor table\
    * All of these are binary strings (the characters "0" and "1"), except also containing\
    * xor in the name for the xor table.\
  */]]\
  local function create_lookupString()\
    local digits = string.byte("0");\
    local conv4 = {};\
    --[[/*\
      * table holding 4 bits at each index\
      * \
      * build up the table, we've got 4 bits meaning 2 ^ 4, which is 16\
      * i = 15 is our 16th iteration\
    */]]\
    for i = 0, 15 do\
      --[[shift & 1 forces the output to be either 0 or 1]]\
      local bits = table.pack(\
        string.char(((i >> 3) & 1) + digits),\
        string.char(((i >> 2) & 1) + digits),\
        string.char(((i >> 1) & 1) + digits),\
        string.char(((i >> 0) & 1) + digits)\
      );\
      conv4[i] = table.concat(bits);\
    end\
    \
    local code_table = {};\
    --[[/*\
      * Using the bits stored in conv4, we create our code table\
      *\
      * We've got 256 cases to build, because 16 * 16 = 256\
      * i = 255 is our 256th iteration\
    */]]\
    for i = 0, 255 do\
      local hi = i >> 4;\
      local lo = i & 15;\
      \
      --[[/*\
        * Each iteration adds 3 elements to our code_table\
        * First, we construct the byte through concatenating the hi_bit to the lo_bit\
        * Next, we do the same but this time we add an xor in the middle\
        * Lastly, we xor the high and low bits together.\
      */]]\
      \
      code_table[#code_table + 1] = conv4[hi] .. conv4[lo];\
      code_table[#code_table + 1] = conv4[hi] .. "xor" .. conv4[lo];\
      code_table[#code_table + 1] = conv4[hi ~ lo];\
    end\
    \
    return table.concat(code_table);\
  end\
  --[[/*\
    * Now, we construct the code for {rng.line_1}, {rng.line_2} and {rng.line_3()} macros.\
    * The code for these is truly awful, because what should be ~7 lines has been crammed into\
    * the minimum possible of 3 lines to save space in user code.\
    *\
    * At a high level, {rng.line_1} is a local.int.set, {rng.line_2} is a local.string.set\
    * and {rng.line_3()} is a goto. Each of these performs multiple different functions, depending\
    * on the phase of execution; the act together as a state machine,\
    * in order to initialize everything that needs initialization.\
    *\
    * The first phase is setting the "rng_from" and "xor" tables.\
    * Both tables have 256 entries, and the data for them is encoded together in the code_table\
    * defined above. In this phase, we first assign the code_table data to rng_state, and then\
    * use entires from it to set rng_from (a double table) and xor (a string table).\
    * We use substring to discard the front of rng_state, which is the current working entry,\
    * to both load a new entry and also because the length of rng_state also functions\
    * as the way to calculate the value we assign to rng_from.\
    *\
    * The second phase is used to read 4 values from the rng and convert them\
    * into individual bits. It lasts for 128 iterations as a result. We use either\
    * contains(local.string.get("1111xor1111", "0")) (the final table entry) or\
    * contains(rng_state, "xor") to determine when the first phase is over;\
    * the two have slight differences at both start and end of phase 1 which dictate\
    * the use of one or the other in specific places.\
    *\
    * Reading bits is relatively straightforward:\
    * A value from rnd() is stored in rng_temp and then multiplied by an appropriate power of 2\
    * to check the sign bit. There is an additional quirk where if the value is exactly 0,\
    * it indicates a condition where we have to restart the process.\
    * This is because, the nature of rnd() is that it adds one to range_max, so there is a hole\
    * where both 0 and 2 ^ 32 - 1 map to the same value and we cannot distinguish them.\
    * Since this is very rare, we just restart and roll again.\
    *\
    * Tricks that are used:\
    * Since contains("", "") is true, contains("", var) is a cheap test to determine\
    * if a variable is unset.\
    * Also, since if() and boolean logic have the same number of nodes,\
    * ternaries are sometimes used to slightly optimize node counts\
  */]]\
  function RNG.cache_lines(cache)\
    --[[/*\
      * If we are in phase 1, set rng_from appropriately.\
      * If we are in phase 2, get a new rng value and save it to rng_temp.\
      * We add back the minimum value to get the raw bits.\
      * We're using a double to avoid issues with the sign bit.\
      * There is also one wrinkle in that the very first iteration will write 256 to "rng_from"\
      * (not technically part of the table), but this is harmless as we never access "rng_from"\
      * directly. We only use rng_from + a byte (eg. 0000 0000).\
      * This is the simplest line, because {rng.line_3()} skips it whenever it isn't needed.\
    */]]\
    cache.line_1 = [==[\
      rng.line_1: {rng_varType}.double.set(\
        if(\
          contains({rng_varType}.string.get("1111xor1111"), "0"),\
          "rng_temp",\
          concat("rng_from", sub(rng_state, 0, 8))\
        ),\
        if(\
          contains({rng_varType}.string.get("1111xor1111"), "0"),\
          i2d(rnd(-2147483648, 2147483646)) + 2147483648.0,\
          i2d(256 - len(rng_state) / 23)\
        )\
      )\
    ]==];\
    \
    --[[/*\
      * This line does the bulk of the work, and thus is the most complicated.\
      * It gets called a total of 641 times:\
      * 513 times in phase 1 (twice per value and one for initial init)\
      * and 128 times in phase 2.\
      *\
      * In phase 1, the sequence is as follows:\
      * first, {rng.line_1} is called to set rng_from, and then this line sets the xor value\
      * After the xor value is set, this line is looped again to shorten rng_state\
      * so we can access the next entry.\
      *\
      * In phase 2, the size of rng_state is multiplied by a power of 2 in order to determine\
      * which bit to select. Since 2 ^ 31 doesn't fit in an integer and the arithmetic.int()\
      * function throws an exception instead of wrapping it to negative, that value is dealt with\
      * as a special case.\
      * Several extra quirks:\
      * If rng_temp is 0, we reset state because of the ambiguity mentioned above.\
      * This also covers the case where we're doing the final loop of phase 1,\
      * as rng_temp is 0 by default.\
      * rng_temp is also reset when the state is of length 128 (meaning we are calling back\
      * into this code after prior initialization, to get a new set of random numbers).\
    */]]\
    cache.line_2 = [==[\
      rng.line_2: {rng_varType}.string.set(\
        if(\
          contains("", rng_state),\
          "rng_state",\
          if(\
            contains({rng_varType}.string.get("1111xor1111"), "0"),\
            "rng_state",\
            if(\
              contains("", {rng_varType}.string.get(sub(rng_state, 8, 11))),\
              sub(rng_state, 8, 11),\
              "rng_state"\
            )\
          )\
        ),\
        if(\
          contains({rng_varType}.string.get("1111xor1111"), "0"),\
          if(\
            rng_temp == 0.0 || len(rng_state) >= 128,\
            "",\
            concat(\
              rng_state,\
              if(\
                rng_temp * (2.0 ^ i2d(len(rng_state) % 32)) % (2.0 ^ 32.0) >= 2.0 ^ 31.0,\
                "1",\
                "0"\
              )\
            )\
          ),\
          if(\
            contains("", {rng_varType}.string.get(sub(rng_state, 8, 11))),\
            if(\
              contains("", rng_state),\
              "CODE_TABLE",\
              sub(rng_state, 19, 4)\
            ),\
            sub(rng_state, 23, 999999)\
          )\
        )\
      )\
    ]==];\
    do\
      local code_table = create_lookupString();\
      cache.line_2 = cache.line_2:gsub("CODE_TABLE", code_table);\
    end\
    --[[/*\
      * Continue the loop at the appropiate line.\
      * Here we check if we're in phase 1 through contains(rng_state, "xor").\
      * This is important because we only enter phase 2 when rng_state is empty.\
      *\
      * In phase 1, we jump to {rng.line_1} when the table values need to be set,\
      * otherwise we skip straight to line 2 to advance to the next table entry.\
      * (This also works at the end of the phase.)\
      *\
      * In phase 2, we jump to the first line only when we need a new rng_entry,\
      * which is every 32 bits. Otherwise, we loop to line 2.\
      * The exit condition is accessed when we've filled all 128 bits.\
      * This exit jump point is marked as EXTERNAL_LABEL, which gets replaced\
      * with the actual label in rng_code().\
    */]]\
    cache.line_3 = [[\
      goto(if(\
        contains(rng_state, "xor"),\
        if(\
          contains("", {rng_varType}.string.get(sub(rng_state, 8, 11))),\
          rng.line_1,\
          rng.line_2\
        ),\
        if(\
          len(rng_state) % 32 != 0,\
          rng.line_2,\
          if(len(rng_state) != 128, rng.line_1, EXTERNAL_LABEL)\
        )\
      ))\
    ]];\
    \
    --[[Now, we remove all spaces from the end result]]\
    for i = 1, 3 do\
      local name = "line_" .. i;\
      cache[name] = cache[name]:gsub(" +", "");\
    end\
  end\
)}

; All functions defined previously are in the global field,
; so ending the lua macro doesn't lose anything of importance
; 
; The reason I'm separating these 2 macros is because the following functions
; form actions dynamically, not statically like seen above
:import Editor_actions lib
; Import Editor_actions lib to form parsable code through lua macros with more ease

{lua(\
  --[[/*\
    * Control variable from Editor_actions lib\
    * false means nothing happens\
    * true means we can pass in an to Editor.assemble_error() and it throw an error\
    * that's a formatted version of the action\
  */]]\
  Editor.format_error_message = false;\
  \
  local rng_varType = "{rng_varType}";\
  \
  --[[Shortened version to perform double to int conversion]]\
  local function d2i(input)\
    return Editor_convertDoubleToInt(input);\
  end\
  \
  --[[/*\
    * Now that we've finished setting up, we can get back to our functions\
    *\
    * Construct the code for {rng.get_int}.\
    * Since rng_from has an 8-bit lookup table, we can convert binary strings to numbers\
    * by looking up just 4 substrings and multiplying by 256 to shift them\
    * into the appropriate place. The upper bit may overflow into the sign bit,\
    * but that's what we want in this case.\
    *\
    * {rng.get_uniform} has a bit more to it, but also doesn't use as many bits from rng_state.\
    * We use a vector type, which is a pair of single-precision numbers, to get accurate\
    * single-precision rounding for the calculation to mirror what Unity does.\
  */]]\
  function RNG.cache_get_int(cache)\
    local rng_from = [["rng_from"]];\
    local rng_state = "rng_state";\
    \
    local bytes = {};\
    for offset = 96, 120, 8 do\
      local name_append = Editor_sub(rng_state, offset, 8);\
      local name = Editor_concat(rng_from, name_append);\
      bytes[#bytes + 1] = Editor_getVar(rng_varType, "double", name);\
    end\
    \
    cache.get_int = bytes[2];\
    cache.get_double = bytes[1];\
    cache.get_uniform = "";\
    do\
      local name_append = Editor_sub(rng_state, 105, 7);\
      local name = Editor_concat([["rng_from0"]], name_append);\
      cache.get_uniform = Editor_getVar(rng_varType, "double", name);\
    end\
    for i = 2, #bytes do\
      if i ~= 2 then\
        cache.get_int = Editor_math(cache.get_int, "*", 256.0);\
        cache.get_int = Editor_math(cache.get_int, "+", bytes[i]);\
        \
        cache.get_uniform = Editor_math(cache.get_uniform, "*", 256.0);\
        cache.get_uniform = Editor_math(cache.get_uniform, "+", bytes[i]);\
        if i < #bytes then\
          cache.get_int = Editor_encase_value(cache.get_int);\
          cache.get_uniform = Editor_encase_value(cache.get_uniform);\
        end\
      end\
      cache.get_double = Editor_math(cache.get_double, "*", 256.0);\
      cache.get_double = Editor_math(cache.get_double, "+", bytes[i]);\
      cache.get_double = Editor_encase_value(cache.get_double);\
    end\
    cache.get_int = d2i(cache.get_int);\
    \
    do\
      local first_int = d2i(bytes[1]);\
      first_int = Editor_math(first_int, "*", 16777216);\
      cache.get_int = Editor_math(first_int, "+", cache.get_int);\
    end\
    cache.get_int = Editor_encase_value(cache.get_int);\
    \
    cache.get_uniform = Editor_vec(cache.get_uniform, 0.0);\
    do\
      local mult = Editor_vec("1.192093e-7", 0.0);\
      cache.get_uniform = Editor_math(cache.get_uniform, "*", mult)\
    end\
    cache.get_uniform = Editor_vector_xCoord(cache.get_uniform)\
  end\
  \
  do\
    --[[This is an example of the xorshift128 function]]\
    local state = {};\
    --[[/*\
      * Our state is a table holding 4 values state[0], state[1], state[2] and state[3];\
      * Lua still lets us index tables by 0, so don't let this indexing by 0 confuse you.\
      *\
      * state reprezents a 128 bit register holding 4 32-bit unsigned integers\
      *\
      * We have our xorshift table, that manipulates our state and returns a modified 32-bit int\
    */]]\
    local function xorshift128()\
      local last = state[3];\
      --[[We make a copy of the last value in our table and then rearrange our state]]\
      state[3] = state[2];\
      state[2] = state[1];\
      state[1] = state[0];\
      \
      --[[/*\
        * We must perform bit operations on our variable `last`\
        *\
        * For this I'll create a helper variable `shift` that performs the bitshifts.\
      */]]\
      \
      local shift = last << 11;\
      --[[/*\
        * To start, we shift last by 11 bits to the left\
        * Then, we take an xor between last and the shift\
      */]]\
      last = last ~ shift;\
      \
      shift = last >> 8;\
      --[[/*\
        * We then take the new value of last and shift it by 8 bits to the right\
        * Then, we take an xor between the new value of last and the shift\
      */]]\
      last = last ~ shift;\
      \
      shift = state[0] >> 19;\
      --[[/*\
        * Lastly, we shift our first integer by 19 bits to the right\
        * Then, we xor the first integer by our shift\
        * And then we xor the last value with our new state[0]\
      */]]\
      state[0] = state[0] ~ shift;\
      state[0] = last ~ state[0];\
      \
      --[[We end the function by returning the modified bit]]\
      return state[0];\
    end\
    --[[/*\
      * As xorshift128 is written in C, it uses little-endian encoding. To show this,\
      * here is a binary representation of status if it held the number\
      * 2 ^ 128 - 2 ^ 97 - 2 ^ 96 + 2 ^ 32 - 3\
      *\
      * status = (\
      *   10111111 11111111 11111111 11111111\
      *   00000000 00000000 00000000 00000000\
      *   00000000 00000000 00000000 00000000\
      *   10111111 11111111 11111111 11111111\
      * );\
      * last = status[3];\
      * status[3] = status[2];\
      * status[2] = status[1];\
      * status[1] = status[0];\
      * shift = last << 11 = 00000000 00010111 11111111 11111111\
      * last = last ~ shift = 10111111 11101000 00000000 00000000\
      * shift = last >> 8 = 11101000 00000000 00000000 00000000\
      * last = last ~ shift = 01010111 11101000 00000000 00000000\
      * shift = status[0] >> 19 = 11111111 11111000 00000000 00000000\
      * status[0] = status[0] ~ shift = 01000000 00010000 000000000 00000000\
      * status[0] = last ~ status[0] = 00010111 11111000 00000000 00000000\
      *\
      * status = (\
      *   00010111 11111000 00000000 00000000\
      *   10111111 11111111 11111111 11111111\
      *   00000000 00000000 00000000 00000000\
      *   00000000 00000000 00000000 00000000\
      * )\
    */]]\
  end\
  \
  --[[/*\
    * Construct {rng.next}.\
    *\
    * This is simply Margsaglia's xorshift128 (defined above), modified for our arhitecture.\
    * Most importantly, we must do everything in parallel (all at once).\
    * Additionally, our representation is in bit-wise big-endian encoding.\
    * example of a 4-bit register holding the number 3:\
    * little endian = 1100\
    * in big endian = 0011\
    *\
    * For our implementation, we can remove the return for the function (as that's unneeded)\
    * and to fit with our big endian representation, last = status[0] instead of status[3].\
    *\
    * To do this simultaneously and in parallel, we want to compute:\
    * rng_state = sub(rng_state, 32, 96) . (\
    *   sub(rng_state, [96...124], 4) ~ sub(rng_state, [96...124] + 19, 4) ; s = s ~ (s >> 19)\
    * ~ sub(rng_state, [0...28], 4)   ~ sub(rng_state, [0...28] - 11, 4)   ; \
    * ~ sub(rng_state, [0...28] + 8)  ~ sub(rng_state, [0...28] - 3, 4)    ; \
    * )\
    * rng_state = rng_state[32..128] .. (\
    *   rng_state[96..128] ^ rng_state[96..108]      ; s ^ (s >> 19)\
    * ^ rng_state[0..32] ^ (rng_state[11..32] << 11) ; t ^ (t << 11)\
    * ^ rng_state[0..24] ^ (rng_state[11..32] << 3)  ; t ^ (t << 11) >> 8\
    * )\
    *\
    * We aligh each of those into 4-bit aligned chunks and compute each chunk separately\
    * by using the 4x4 bit xor table to compute the xors, concatenating them at the end.\
    * each index here is the base, extending +4 (or sometimes fewer) bits.\
    *  96 100 104 108 112 116 120 124\
    *   -   -   -   -  96  97 101 105\
    *   0   4   8  12  16  20  24  28\
    *  11  15  19  23  27  31   -   -\
    *   -   -   0   4   8  12  16  20\
    *   -   -  11  15  19  23  27  31\
  */]]\
  local function test()\
    local state = {};\
    state[1] = Editor_sub("rng_state", 32, 96);\
    --[==[Performs state[3], state[2], state[1] = state[2], state[1], state[0] ]==]\
    for i = 0, 32, 4 do\
      local term = "";\
      if i == 32 then\
        \
      end\
    end\
  end\
  function RNG.cache_next(cache)\
    --[[/*\
      * To access state[0], we do sub(rng_state, [0 - 27], 4);\
      * To access state[3], we do sub(rng_state, [96-124], 4);\
      *\
      * Given how Editor_actions lib works, we can work backwards, so the logic flow\
      * can mimic that seen in the \
      * This requires explanation through example, so here are some formatting rules:\
      * a bit is 1 or 0, a byte is 8 bits. 2 ^ 8 - 1 in bits = 1111 1111\
      * I use the separator `|` to separate a byte from another\
      * 2 ^ 16 - 1 is 2 bytes (16 bits) = 1111 1111|1111 1111\
      *\
      * The biggest restriction is that we only have 4-bit registers to work with, as apposed to\
      * the 32 bit registers used in the code. To help with understanding what's going on, I'll\
      * show the raw bits of the number 2 ^ 128 - 2 ^ 97 - 2 ^ 96 + 2 ^ 32 - 3 in binary\
      * rng_state = (\
      *   1111 1111|1111 1111|1111 1111|1111 1101 state[0]\
      *   0000 0000|0000 0000|0000 0000|0000 0000 state[1]\
      *   0000 0000|0000 0000|0000 0000|0000 0000 state[2]\
      *   1111 1111|1111 1111|1111 1111|1111 1101 state[3]\
      * )\
      *\
      * So, passing rng_state to xorshift128 we'd get\
      * final = state[0]\
      * shift = final << 11 = 1111 1111|1111 1111|1110 1000|0000 0000\
      * final = final ~ shift = 0000 0000|0000 0000|0001 0111|1111 1111\
      * shift = final >> 8 = 0000 0000|0000 0000|0000 0000|0001 0111\
      * final = final ~ shift = 0000 0000|0000 0000|0001 0111|1110 1000\
      * shift = state[3] >> 19 = 0000 0000|0000 0000|0001 1111|1111 1111\
      * state[3] = state[3] ~ shift = 1111 1111|1111 1111|1110 0000|0000 0010\
      * state[3] = final ~ state[3] = 1111 1111|1111 1111|1110 0000|0000 1001\
      *\
      * Which will get translated to this:\
      * var1 = state[0];\
      * var2 = var1 << 11;\
      * var3 = var1 ~ var2;\
      * var4 = var3 >> 8;\
      * var5 = state[3];\
      * var6 = var5 >> 19;\
      * var7 = var5 ~ var6;\
      * var8 = var4 ~ var7;\
      *\
      *\
      * To construct a single 4-bit term in the formula, we pass this varargs function the offsets\
      * from a column in the table above, and the last value indicates the number of bits for the\
      * partial term. Some chunks can be made entirely with 4-bit terms, but others have a partial\
      * term made with a smaller number of bits. Thankfully, there's at most 1 of these per chunk.\
      * We use a positive value to indicate a term that needs padding on the left, and a negative\
      * value to indicate a term that needs padding on the right.\
      *\
      * The indexing is a little complicated; This example shows how the indices work for args=3.\
      *        1    2       3     4    5       6     7    8 9 \
      *       lsg( sub() ."xor". lsg( sub() ."xor". sub() ) ) \
    */]]\
    \
    local function singleTerm(...)\
      local input = table.pack(...);\
      local args = #input - 1;\
      local res = "";\
      if input[#input] >= 0 then\
        res = Editor_sub("rng_state", input[args], input[#input]);\
        local xor = "xor" .. string.rep("0", 4 - input[#input]);\
        res = Editor_concat(Editor_stringify_value(xor), res);\
      else\
        res = Editor_sub("rng_state", input[args], -input[#input]);\
      end\
      \
      for i = args - 1, 1, -1 do\
        local next = Editor_sub("rng_state", input[i], 4);\
        \
        if i ~= args - 1 then\
          local xor = [["xor"]];\
          res = Editor_concat(xor, res);\
          res = Editor_concat(next, res);\
        elseif input[#input] >= 0 then\
          res = Editor_concat(next, res);\
        else\
          local xor = string.rep("0", 4 + input[#input]) .. "xor";\
          next = Editor_concat(Editor_stringify_value(xor), next);\
          res = Editor_concat(res, next);\
        end\
        res = Editor_getVar(rng_varType, "string", res);\
      end\
      return res;\
    end\
    \
    local result = table.pack(\
      singleTerm( 96,  0,     11,               4),\
      singleTerm(100,  4,     15,               4),\
      singleTerm(104,  8,  0, 19, 11,           4),\
      singleTerm(108, 12,  4, 23, 15,           4),\
      singleTerm(112, 16,  8, 27, 19, 96,       1),\
      singleTerm(116, 20, 12,     23, 97,  31, -1),\
      singleTerm(120, 24, 16,     27, 101,      4),\
      singleTerm(124, 28, 20,         105, 31, -1)\
    );\
    cache.next = "rng_state = sub(rng_state, 32, 96) . " .. table.concat(result, " . ");\
  end\
  \
  function RNG.get_range(min, max)\
    local min_nr = tonumber(min);\
    local max_nr = tonumber(max);\
    local range;\
    if min_nr and max_nr then\
      range = string.format("%.1f", max_nr + 0.0 - min_nr + 1);\
    else\
      range = string.format([[(i2d(%s) - i2d(%s) + 1.0)]], max, min);\
    end\
    \
    local modulus = Editor_math(RNG.code_cache.get_double, "%", range);\
    if min_nr then\
      if min_nr == 0 then\
        return "d2i(" .. modulus .. ")";\
      end\
      return string.format("d2i(%.1f + %s)", min_nr, modulus);\
    end\
    return string.format([[d2i(i2d(%s) + %s)]], min, modulus);\
  end\
  \
  --[[/*\
    * Return the appropriate code (macro body) given the passed in "id".\
    * All this does is lookup the precomputed code and return that;\
    * If the code hasn't been computed yet, it calls the helper functions that exist\
    * specifically to set that up.\
    * The one wrinkle is that {rng.line_3()} has a parameter, and that's substituted in here.\
  */]]\
  function RNG.macro_body(id, arg1, arg2)\
    local cache = RNG.code_cache;\
    \
    if cache == nil then\
      RNG.code_cache = {};\
      cache = RNG.code_cache;\
      RNG.cache_lines(cache);\
      RNG.cache_next(cache);\
      RNG.cache_get_int(cache);\
    end\
    if id == "get_range" then\
      return RNG.get_range(arg1, arg2);\
    end\
    local res = cache[id];\
    if arg1 then\
      res = res:gsub("EXTERNAL_LABEL", arg1);\
    end\
    return res;\
  end\
)}
