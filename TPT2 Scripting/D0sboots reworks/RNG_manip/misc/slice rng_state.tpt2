:import RNG_manip lib

{lua(\
  local ans = {};\
  \
  local bin = {};\
  bin.conv_4 = {};\
  bin.nibble = {};\
  \
  local digits = string.byte("0");\
  for i = 0, 15 do\
    --[[shift & 1 forces the output to be either 0 or 1]]\
    local bits = table.pack(\
      string.char(((i >> 3) & 1) + digits),\
      string.char(((i >> 2) & 1) + digits),\
      string.char(((i >> 1) & 1) + digits),\
      string.char(((i >> 0) & 1) + digits)\
    );\
    bin.conv_4[i] = table.concat(bits);\
    bin.nibble[bin.conv_4[i]] = i;\
  end\
  \
  local rng_next = RNG.macro_body("next"):gsub("local.string.get", "get_string");\
  local meta = {};\
  for chunk in rng_next:gmatch("[^%.]+") do\
    meta[#meta + 1] = {};\
    local helper = meta[#meta];\
    helper.numbers = {};\
    helper.xor = {};\
    local numbers = helper.numbers;\
    for num in chunk:gmatch("%d+") do\
      if num ~= "000" then\
        numbers[#numbers + 1] = num;\
      end\
    end\
    local xor = helper.xor;\
    for add in chunk:gmatch("%d*xor%d*") do\
      xor[#xor + 1] = add;\
    end\
  end\
  \
  local bits = table.pack(\
    "1111", "0000", "1011", "1011", "0100", "1001", "0001", "0010",\
    "0100", "0001", "0010", "0101", "1100", "1111", "0000", "0101",\
    "1100", "1111", "0100", "1101", "0001", "1011", "0011", "0100",\
    "1100", "1111", "1100", "1000", "0000", "0011", "1110", "1010"\
  );\
  local str = table.concat(bits)\
  local function sub(offset, size)\
    return str:sub(offset + 1, offset + size);\
  end\
  \
  local acc = table.pack("\n");\
  for i = 1, #meta do\
    local numbers = meta[i].numbers;\
    local xor = meta[i].xor;\
    local idx = 1;\
    local binary = {};\
    for j = 1, #numbers, 2 do\
      if j ~= 1 then\
        binary[#binary + 1] = xor[idx];\
        idx = idx + 1;\
      end\
      binary[#binary + 1] = sub(numbers[j], numbers[j + 1]);\
    end\
    if #binary == 1 then\
      acc[#acc + 1] = table.concat(binary)\
      ans[#ans + 1] = acc[#acc];\
      acc[#acc + 1] = "\n"\
    else\
      local operation = binary[#binary];\
      for j = #binary - 1, 1, -2 do\
        local res = binary[j - 1] .. binary[j] .. operation;\
        local hi_bit = bin.nibble[res:sub(1, 4)];\
        local lo_bit = bin.nibble[res:sub(8, -1)];\
        operation = bin.conv_4[hi_bit ~ lo_bit];\
        acc[#acc + 1] = res;\
        acc[#acc + 1] = "=";\
        acc[#acc + 1] = operation;\
        acc[#acc + 1] = "\n";\
      end\
      ans[#ans + 1] = operation;\
    end\
    acc[#acc + 1] = "\n"\
  end\
  error(table.concat(acc))\
)}