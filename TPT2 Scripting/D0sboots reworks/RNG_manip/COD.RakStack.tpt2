:import RNG_manip lib
:name COD.RakStack
:budget_cap 200

:global string rak_stacks

:local int rak_index

:local double stacks
:local double waves

#raw_waves wave() + 1e11 * (era() + infinity() * 1e11)

wakeup()
game.newround()
;
isTowerTesting()

rak_index = active.index("spell.raksCurse")
; Terminate the instance if we're not the first running instance
; or if the blueprint doesn't have raks curse
;
; active.index(spell not in blueprint) == 0
goto(if(\
  contains(rak_stacks, ";") || rak_index == 0,\
  99,\
  wait\
))

use_instant:
useinstant(rak_index)
stacks += min(1.0, ceil(cooldown(rak_index)))

wait:
; Update our shown stacks
rak_stacks = concat(d2s(stacks), ";")
waves = {raw_waves}
waitframe()
; Terminate the instance if:
; - we're dead
; - the user restarted and doesn't have wave restart active
; - we've reached 5 stacks
; Otherwise, if raks curse is on cooldown we keep waiting otherwise we jump to line 2
goto(if(\
  health(false) <= 0.0 || {raw_waves} < waves || contains(rak_stacks, "5"),\
  end,\
  if(cooldown(rak_index) > 0.0, wait, rng.line_2)\
))

{rng.line_1}
{rng.line_2}
{rng.line_3(guess)}

guess:
{rng.next}
; Look for the rng value.
;
; raks curse has a 99.8% chance to do nothing,
; 0.1% chance to kill the tower and a 0.1% chance to add a stack
; This means that we're generating from a pool of 100 / 0.1 = 1000 values
; Since it's 0-inclusive, we actually have 1000 - 1 values = 999
; By there being a 1 in 1000 chance that we get a stack, we only use raks curse if
; the number is smaller than 1. Otherwise, we need to move to the next rng value,
; for this next value to correlate with the internal rng value, we must also call for rnd()
goto(if(\
  {rng.get_range(0, 999)} < 1,\
  use_instant,\
  guess + rnd(0, 0)\
))

end:
rak_stacks = d2s(stacks)