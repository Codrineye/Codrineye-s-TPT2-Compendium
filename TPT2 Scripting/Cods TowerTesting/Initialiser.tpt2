:import TowerTesting_lib
:name {package(Initialiser)}

key.x()

:local bool additional_cond

global.string.set({hider}, if(\
  {state_get}, \
  "Codrineye's TowerTesting Is Shutdown", \
  "</size>" . \
    "q -> CurentMode" . "<br>" . \
    "w -> Region_Cycling"\
))

{state_toggle}
goto(if({state_get}, skip, 99))

skip:
execute("{package(Restart At Will)}")
execute("{package(Stats Exit Diff_Change)}")
execute("{package(Movement Manager)}")
executesync("{package(Toggles)}")
waitwhile({state_get} && (anyopen() || isTowerTesting()))

loop:
waitwhile({state_get} && (isTowerTesting() == false))
additional_cond_loop:
; line 9
additional_cond = infinity() == a.d(10.0, "^", 3.0)
gotoif(\
  additional_cond_loop, \
  {state_get} && health(false) > 0.0 && \
  (additional_cond == false) && (enemies() > 0 || wave() < 100.0)\
)

exit_loop:
exit()
gotoif(exit_loop, isTowerTesting())
stop("{package(Restart At Will)}")
gotoif(loop, {state_get})

