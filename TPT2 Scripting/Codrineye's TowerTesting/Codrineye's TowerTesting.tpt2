:import Codrineye's TowerTesting_lib
:name {script_name}
:budget_cap max

; store the y coordinate for the difficulty button
:local double difficulty

; keep a timer so that the user can make additional_cond exit
; after a certain ammount of time has passed
:global double time.real
:global double time.game

; const string that define in which direction the script can
; cycle through difficulties
; false = Easy to Impossible
; true = Impossible to Easy
:const string forwards_diff_list {diff_list(false)}
:const string reversed_diff_list {diff_list(true)}

; QOL macro to determine the direction via the source
#difficulty_list forwards_diff_list

:local int difficulty_index
:local int counting
:local bool can_switch
:local bool additional_cond
; 
; QOL macro that lets you add the additional cond from the source
#additional_cond false

game.newround()
key.{state_switch}()
key.{mode_switch}()
key.{cycling}()
key.{restart}()
key.{exit}()
key.{stats}()

; conditions for user convenience
; 
; you get to chose the direction the difficulties are cycled in
; start with easy and move on to impossible, or
; start with impossible and move on to easy
concat("Easy -> Impossible", forwards_diff_list) != \
concat("Impossible -> Easy", reversed_diff_list)

#condition_comment {lua(\
  local msg = table.pack(\
    "</size>",\
      "\nadditional_cond is found on line ",\
      [[" . i2d(additional_cond_pos) . "]],\
      "\nto change the difficulty direction, modify action ",\
      [[" . i2d(difficulty_list_pos) . "]],\
    "<size=0>"\
  );\
  return table.concat(msg);\
)}
contains(\
  concat("click here for line numbers!<size=0>", "{condition_comment}"),\
  ""\
)

; Start of code

; I could use this for a jump table if I wanted to
; local.int.set("restart_lable", restart)
; local.int.set("exit_lable", exit)
; local.int.set("stats_lable", stats)

gotoif(\
  if({state.get}, movement_manager, 99), \
  impulse() == "{script_name}"\
)

init:
global.string.set({hider}, "Start hiding values")
; makes sure the timers are kept hidden

time.real = if(impulse() == "game.newround", 0.0, time.real)
time.game = if(impulse() == "game.newround", 0.0, time.game)

global.string.set(stop_hiding, if(\
  not({state.get}) && impulse() == "key.{state_switch}" ||\
  contains("key.{mode_switch}|key.{cycling}", impulse()) ||\
  {state.get} && contains("key.{exit}|key.{stats}|key.{restart}|game.newround", impulse()), \
  concat("Stop Hiding", "</size>"), \
  "Cods TowerTesting is Hiding"\
))

; State, region_cycling and curent_mode are toggles
{state.set({state.get} != (impulse() == "key.{state_switch}"))}
{region_cycling.set({region_cycling.get} != (impulse() == "key.{cycling}"))}
{curent_mode.set(if(\
  impulse() == "key.{mode_switch}",\
  if({curent_mode.get} == mode1, mode2, mode1),\
  if({curent_mode.get} == mode2, mode2, mode1)\
))}

; Set the job status to itself so interracting with the script doesn't hide the job.
; Sets itself to an empty job_status if this is the first time it's getting set
global.string.set(job_status, if({job.get} == "", "</size></size>", {job.get}))

; This gotoif is passed only if we didn't activate the script
;
; We exit if we started a new round or if key.{cycling}/key.{mode_switch} was pressed
; otherwise, if one of the qol impulses were pressed but we're not in towertesting, we exit
; Otherwise, we perform the qol action that was requested
gotoif(\
  if(\
    isTowerTesting() && contains("key.{exit}|key.{stats}|key.{restart}", impulse()),\
    if(\
      impulse() == "key.{exit}",\
      exit,\
      if(impulse() == "key.{stats}", stats, restart)\
    ),\
    99\
  ),\
  not({state.get}) || impulse() != "key.{state_switch}"\
)

; make a copy of yourself for movement_manager
execute("{script_name}")

{job.set(\
  "<color=#FAA00F>Waiting for user to close the "\
  . if({opened_building}, "building", "menu")\
  . "</color>"\
)}
; Sets the job status to a warning.
; It lets the user know that they need to close
; whatever building or menu they're in

loop:
waitwhile(isTowerTesting() && {state.get})
waituntil(isTowerTesting() || not({state.get}))

{job.set("<color=#0AFF00>Waiting to exit tower testing</color>")}
; Lets the user know that everything is going well and the script
; is running as intentional

in_towertesting:
waitframe()

; Update our timers
time.game += time.delta()
time.real += time.unscaled()

additional_cond_pos:
additional_cond = {additional_cond}

; exit if the script is active, our conditional cond isn't met
; our tower is alive and if we haven't killed all enemies
; (if used in normal mode instead of endless)
gotoif(\
  in_towertesting,\
  health(false) > 0.0 && {state.get} && not(additional_cond)\
)

exit:

{job.set(\
  "<color=#0AFF00>Exit caused by "\
  . if(\
    impulse() == "key.{exit}" ||\
    {job.get} == "</size>"\
    . "<color=#0AFF00>Exit caused by pressing key.{exit}</color>"\
    . "</size>",\
    "pressing key.{exit}",\
    if(\
      additional_cond, \
      "additional_cond", \
      if(\
        isTowerTesting() ||\
        {job.get} == "</size>"\
        . "<color=#0AFF00>Exit caused by tower death</color>"\
        . "</size>",\
        "tower death",\
        "an external cause"\
      )\
    )\
  ) . "</color>"\
)}

exit()
wait(time.unscaled() * 2.0)

goto(if(isTowerTesting(), exit, if(\
  (impulse() == "key.{exit}") || not({state.get}), \
  99, \
  loop\
)))

; mode1 means we cycle through our difficulties
; and change region only after 6 counts
; mode1 && counting < 6
:const int base.mode1 6

; mode2 means we always advance through the region
; and change difficulty only after 15 repetitions
; mode2 && counting < 14
:const int base.mode2 15

change_region:
waitframe()

; click on the arrow to change region
{click.relative(290.0/800.0, 201.0/450.0, 0.0, 1.0)}

change_difficulty:
can_switch = true

difficulty_list_pos:
; determine the difficulty we should switch to
difficulty = s2d(\
  sub({difficulty_list}, difficulty_index * coord_size, coord_size), \
  290.0\
)

; increment the difficulty index if we should switch difficulty
; this is always done if we're mode1, and if we're mode2 only when
; we're on the last region before we refresh
difficulty_index = if(\
  ({curent_mode.get} == mode2 && counting < 14), \
  difficulty_index, \
  (difficulty_index + 1) % difficulty_count\
)

launch_round:
; click on the difficulty
{click.relative(395.0/800.0, difficulty/450.0, 0.0, 1.0)}

; launch a round of towertesting
{click.relative(162.0/800.0, 97.0/450.0, 0.0, 1.0)}

; try to launch the round if we're not in towertesting and
; not shut down. If we're shut down, terminate the program.
gotoif(\
  if({state.get}, launch_round, 99), \
  not({state.get} && isTowerTesting())\
)

; increment counting based on our mode
counting = if(\
  {curent_mode.get} == mode1, \
  (counting + 1) % base.mode1,\
  (counting + 1) % base.mode2\
)

movement_manager:
waitwhile({state.get} && (isTowerTesting() || anyopen()))
show("towertesting", true)

gotoif(\
  if(\
    can_switch && {region_cycling.get} && (\
      ({curent_mode.get} == mode2) || \
      ({curent_mode.get} == mode1 && counting == 0)\
    ),\
    change_region,\
    change_difficulty\
  ),\
  {state.get}\
)
; exit script if we're shut down
; Change region if we can do so, otherwise, change difficulty

; The user requested a restart
restart:
restart()

; The user requested the stats be shown
; This clicks in the general area of the button where
; resource/sec, xp/sec and frags obtained are seen
stats:
waitframe()
{click.relative(260.0/800.0, 275.0/450.0, 0.5, 0.5)}
