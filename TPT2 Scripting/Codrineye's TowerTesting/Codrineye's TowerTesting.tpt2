:import Codrineye's TowerTesting_lib
:name {script_name}
:budget_cap max

; store the coord_y value
:local double difficulty

; keep a timer so that the user can make additional_cond exit after
; an ammount of time has passed
:global double time.real
:global double time.game

; const string that define in which direction the script can
; cycle through difficulties
; Positive number = Easy to Impossible
; Negative number = Impossible to Easy
:const string forwards_diff_list {diff_list(1)}
:const string reversed_diff_list {diff_list(-1)}

; QOL macro to determine the direction via the source
#difficulty_list forwards_diff_list

:local int difficulty_index
:local int counting
:local bool can_switch
:local bool additional_cond
; 
; QOL macro that lets you add the additional cond from the source
#additional_cond false

game.newround()
key.{state_switch}()
key.{mode_switch}()
key.{cycling}()
key.{restart}()
key.{exit}()
key.{stats}()

; conditions for user convenience
; 
; you get to chose the direction the difficulties are cycled in
; start with easy and move on to impossible, or
; start with impossible and move on to easy
concat("Easy -> Impossible", forwards_diff_list) != \
concat("Impossible -> Easy", reversed_diff_list)

; helper macros containing the components of our second condition
; telling the user at what line they input the difficulty direction string
; or at which line they input their additional cond

#instruct.change_direction "To change the difficulty direction you must"
#goto_line.change_direction "go to line " . difficulty_list_pos

#instruct.additional_cond "To use additional_cond you must"
#goto_line.additional_cond "go to line " . additional_cond_pos

concat({instruct.change_direction}, {goto_line.change_direction}) != \
concat({instruct.additional_cond}, {goto_line.additional_cond})

#contains.key(impulse) contains(impulse(), "key.{impulse}")
#contains.mode(mode) contains({curent_mode.get}, {mode})

#impulse.qol "key.{restart}key.{exit}key.{stats}"
#impulse.toggles "key.{mode_switch}key.{cycling}"
#impulse.state "key.{state_switch}" . {impulse.toggles}

; Start of code

; I could use this for a jump table if I wanted to
; local.int.set("restart_lable", restart)
; local.int.set("exit_lable", exit)
; local.int.set("stats_lable", stats)

gotoif(\
  if(\
    {state.get}, \
    if(contains(impulse(), "newround"), new_round, movement_manager), \
    99\
  ), \
  contains("{script_name}game.newround", impulse())\
)

; caller macros that determine what the hide blocker should do
; 
; .toggles always stop the hide block, no matter the scripts state
; .state stops the hider if we're starting up else frees the hider
; .qol doesn't interfere with the blockers state

#caller.toggles contains({impulse.toggles}, impulse())
#caller.state not({state.get}) && {contains.key({state_switch})}
#caller.qol {state.get} && contains({impulse.qol}, impulse())

init:
global.string.set({hider}, "Start hiding values")
; makes sure the timers are kept hidden
time.real = time.real
time.game = time.game
global.string.set(stop_hiding, if(\
  {caller.state} || ({caller.toggles}) || ({caller.qol}), \
  concat("Stop Hiding", "</size>"), \
  "Cods TowerTesting is Hiding"\
))

gotoif(\
  if(\
    isTowerTesting(), \
    if(\
      {contains.key({restart})}, \
      restart, \
      if({contains.key({exit})}, exit, stats)\
    ),\
    99\
  ), \
  contains({impulse.qol}, impulse())\
)

update_state:
{state.set({state.get} != {contains.key({state_switch})})}
{region_cycling.set({region_cycling.get} != {contains.key({cycling})})}
{curent_mode.set(if(\
  {contains.key({mode_switch})},\
  if({contains.mode(mode2)}, mode1, mode2),\
  if({contains.mode(mode2)}, mode2, mode1)\
))}

; exit the script if we're called
; for cycling, mode or if we're shut down
gotoif(99, contains({impulse.toggles}, impulse()) || not({state.get}))

; make a copy of yourself for movement_manager
execute("{script_name}")

loop:
waitwhile(isTowerTesting() && {state.get})
waituntil(isTowerTesting() || not({state.get}))

in_towertesting:
waitframe() ; wait a frame

; resetting our timers is handled by the game.newround() impulse
time.game += time.delta()
; Transfer the value so it can be used in additional_cond
time.real += time.unscaled()

additional_cond_pos:
additional_cond = {additional_cond}

; exit if the script is active, our conditional cond isn't met
; our tower is alive and if we haven't killed all enemies
; (if used in normal mode instead of endless)
gotoif(\
  in_towertesting, \
  health(false) > 0.0 && {state.get} && not(additional_cond)\
  && (enemies() > 0 || time.game <= time.delta())\
)

exit:
exit()
wait(0.25)

goto(if(isTowerTesting(), exit, if(\
  {contains.key({exit})} || not({state.get}), \
  99, \
  loop\
)))

; mode1 means we cycle through our difficulties
; and change region only after 6 counts
; {contains.mode(mode1)} && counting < 6
:const int base.mode1 6
#switch.mode1 {contains.mode(mode1)} && counting == 0

; mode2 means we always advance through the region
; and change difficulty only after 15 repetitions
; {contains.mode(mode2)} && counting < 14
:const int base.mode2 15
#switch.mode2 {contains.mode(mode2)} && counting < 14

change_region:
waitframe()

; click on the arrow to change region
{click.relative(290.0/800.0, 201.0/450.0, 0.0, 1.0)}

change_difficulty:
can_switch = true

difficulty_list_pos:
; determine the difficulty we should switch to
difficulty = s2d(\
  sub({difficulty_list}, difficulty_index * coord_size, coord_size), \
  290.0\
)

; increment the difficulty index if we should switch difficulty
; this is always done if we're mode1, and if we're mode2 only when
; we're on the last region before we refresh
difficulty_index = if(\
  {switch.mode2}, \
  difficulty_index, \
  (difficulty_index + 1) % difficulty_count\
)

launch_round:
; click on the difficulty
{click.relative(395.0/800.0, difficulty/450.0, 0.0, 1.0)}

; launch a round of towertesting
{click.relative(162.0/800.0, 97.0/450.0, 0.0, 1.0)}

; try to launch the round if we're not in towertesting and
; not shut down. If we're shut down, terminate the program.
gotoif(\
  if({state.get}, launch_round, 99), \
  not({state.get} && isTowerTesting())\
)

; increment counting based on our mode
counting = if(\
  {contains.mode(mode1)}, \
  (counting + 1) % base.mode1, \
  (counting + 1) % base.mode2\
)

movement_manager:
waitwhile({state.get} && (isTowerTesting() || anyopen()))
show("towertesting", true)

gotoif(\
  if(\
    can_switch && {region_cycling.get} &&\
    ({contains.mode(mode2)} || {switch.mode1}),\
    change_region,\
    change_difficulty\
  ),\
  {state.get}\
)
; exit script if we're shut down
; Change region if we can do so, otherwise, change difficulty

; The user requested a restart
restart:
restart()

new_round:
time.game = 0.0
time.real = 0.0

; The user requested the stats be shown
; This clicks in the general area of the button where
; resource/sec, xp/sec and frags obtained are seen
stats:
waitframe()
{click.relative(260.0/800.0, 275.0/450.0, 0.5, 0.5)}
