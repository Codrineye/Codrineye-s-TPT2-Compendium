:import Codrineye's TowerTesting_lib
:name {script_name}
:budget_cap max

; store the coord_y value
:local double difficulty

; const string that define in which direction the script can
; cycle through difficulties
; Positive number = Easy to Impossible
; Negative number = Impossible to Easy

:const string forwards_diff_list "{diff_list(1)}"
:const string reversed_diff_list "{diff_list(-1)}"

; QOL macro to determine the direction
#difficulty_list forwards_diff_list

; detect at which difficulty we're at
:local int difficulty_index

; keep count until we complete a cycle
:local int counting

; signal to know if we can switch our difficulty or not
:local bool can_switch

; variable that lets you add aditional conditions
:local bool additional_cond
; 
; QOL macro that lets you add the additional cond from the source
#additional_cond false

key.{state_switch}()
key.{mode_switch}()
key.{cycling}()
key.{restart}()
key.{exit}()
key.{stats}()

; conditions for user convenience
; 
; you get to chose the direction the difficulties are cycled in
; start with easy and move on to impossible, or
; start with impossible and move on to easy

concat("Easy -> Impossible", forwards_diff_list) != \
concat("Impossible -> Easy", reversed_diff_list)

; helper macros containing the components of our second condition
; telling the user at what line they input the difficulty direction string
; or at which line they input their additional cond

#instruct.change_direction "To change the difficulty direction you must"
#goto_line.change_direction "go to line " . difficulty_list_pos

#instruct.additional_cond "To use additional_cond you must"
#goto_line.additional_cond "go to line " . additional_cond_pos

concat({instruct.change_direction}, {goto_line.change_direction}) != \
concat({instruct.additional_cond}, {goto_line.additional_cond})

; helper macros to shorten contains operations
; 
; .key makes it easier to see what I'm checking for
; .mode(mode) makes it easier to see what mode I'm looking for

#contains.key(impulse) contains(impulse(), "key.{impulse}")
#contains.mode(mode) contains({curent_mode.get}, {mode})

; impulse macros to shorten contains() checks
; 
; .qol is the string representing all qol impulses
; .toggle is the string representing all toggle impulses
; .state is the string that represents all update_state impulses


#impulse.qol "key.{restart}key.{exit}key.{stats}"
#impulse.toggles "key.{mode_switch}key.{cycling}"
#impulse.state "key.{state_switch}" . {impulse.toggles}

; Start of code

; I could use this for a jump table if I wanted to
; local.int.set("restart_lable", restart)
; local.int.set("exit_lable", exit)
; local.int.set("stats_lable", stats)

gotoif(\
  if({state.get}, movement_manager, 99), \
  contains(impulse(), "{script_name}")\
)

; caller macros that determine what the hide blocker should do
; 
; .toggles always stop the hide block, no matter the scripts state
; .state stops the hider if we're waking up else frees the hider
; .qol doesn't interfere with the blockers state

#caller.toggles contains({impulse.toggles}, impulse())
#caller.state not({state.get}) && {contains.key({state_switch})}
#caller.qol {state.get} && contains({impulse.qol}, impulse())

global.string.set({hider}, if(\
  {caller.state} || ({caller.toggles}) || ({caller.qol}), \
  concat("Stop Hiding", "</size>"), \
  "Cods TowerTesting is Hiding"\
))

gotoif(if(\
  isTowerTesting(), \
  if(\
    {contains.key({restart})}, \
    restart, \
    if({contains.key({exit})}, exit, stats)\
  ),\
  99\
), contains({impulse.qol}, impulse()))

update_state:
; state is toggled only if you want it to change
{state.set({state.get} != {contains.key({state_switch})})}

; region_cycling is toggled only if you want it to change
{region_cycling.set({region_cycling.get} != {contains.key({cycling})})}

; curent_mode cycles through its values only if you want it to change
global.string.set({curent_mode}, if(\
  {contains.key({mode_switch})}, \
  if({contains.mode(mode2)}, mode1, mode2), \
  if({contains.mode(mode2)}, mode2, mode1)\
))

; exit the script if we're called
; for cycling, mode or if we're shut down
gotoif(99, contains({impulse.toggles}, impulse()) || not({state.get}))

; make a copy of yourself for movement_manager
execute("{script_name}")

loop:
; a gate that ensures we only enter the in_towertesting loop
; when in towertesting
; 
; we wait as long as towertesting is active
waitwhile(isTowerTesting() && {state.get})

; we wait as long as towertesting is inactive
waituntil(isTowerTesting() || not({state.get}))

; loop performed while we're in towertesting
; to determine when to exit
in_towertesting:

; waitframe() is here to prevent the script from
; crashing Facility AI, as this loop only consists
; of atomic actions
waitframe()

; additional_cond must always be false until it's met
; if you want to exit when you reach x amount of eras
; `era() >= x` => This is good
; `era() < x`  => This is bad

additional_cond_pos:
additional_cond = {additional_cond}

; stay in the loop as long as the tower is alive, the script is alive
; and the users additional_cond is not met, otherwise, we exit
gotoif(\
  in_towertesting, \
  health(false) > 0.0 && {state.get} && not(additional_cond)\
)

; exit towertesting
exit:
exit()

; wait for the exit transition animation
wait(0.222)

; attempt to exit while we're still in towertesting
; once out of towertesting we terminate the script if
; we're told by the user to exit or the AI is shut down
; otherwise, we return to loop

goto(if(isTowerTesting(), exit, if(\
  {contains.key({exit})} || not({state.get}), \
  99, \
  loop\
)))

; mode1 means we cycle through our difficulties
; and change region only after 6 counts
; {contains.mode(mode1)} && counting < 6
:const int base.mode1 6
#switch.mode1 {contains.mode(mode1)} && counting == 0

; mode2 means we always advance through the region
; and change difficulty only after 15 repetitions
; {contains.mode(mode2)} && counting < 14
:const int base.mode2 15
#switch.mode2 {contains.mode(mode2)} && counting < 14

change_region:

; wait for the game to enter the towertesting window
waitframe()

; click on the arrow to change region
{click.relative(290.0/800.0, 201.0/450.0, 0.0, 1.0)}


change_difficulty:

; signal to the script that we're able to switch regions
can_switch = true

difficulty_list_pos:
; determine the difficulty we should switch to
difficulty = s2d(\
  sub({difficulty_list}, difficulty_index * coord_size, coord_size), \
  290.0\
)

; increment the difficulty index if we should switch difficulty
; this is always done if we're mode1, and if we're mode2 only when
; we're on the last region before we refresh
difficulty_index = if(\
  {switch.mode2}, \
  difficulty_index, \
  (difficulty_index + 1) % difficulty_count\
)

launch_round:
; click on the difficulty
{click.relative(395.0/800.0, difficulty/450.0, 0.0, 1.0)}

; launch a round of towertesting
{click.relative(162.0/800.0, 97.0/450.0, 0.0, 1.0)}

; quit if the script is shut down, otherwise try to launch
; a round of towertesting otherwise proceed since we are
; in a round of TowerTesting
goto(if(\
  {state.get}, \
  if(isTowerTesting(), in_towerTesting, launch_round),\
  99\
))

in_towerTesting:
; increment counting based on our mode
counting = if(\
  {contains.mode(mode1)}, \
  (counting + 1) % base.mode1, \
  (counting + 1) % base.mode2\
)

movement_manager:

; waitwhile we can't open towertesting and our script is active
; wait for our transition_delay to expire

waitwhile({state.get} && (isTowerTesting() || anyopen()))

; open towertesting
show("towertesting", true)

; exit script if we're shut down
; enter region if region_cycling is on and we're in mode 2 or
; counting == 0 and we can change region
; otherwise, try to change difficulty
goto(if(\
  {state.get}, \
  if(\
    ({contains.mode(mode2)} || {switch.mode1}) && \
    {region_cycling.get} && can_switch, \
    change_region, \
    change_difficulty\
  ), \
  99\
))

; The user requested a restart
restart:
restart()

; The user requested the stats be shown
; This clicks in the general area of the button where
; resource/sec, xp/sec and frags obtained are seen

stats:
waitframe()
{click.relative(260.0/800.0, 275.0/450.0, 0.5, 0.5)}
