:import Codrineye's TowerTesting_lib
:name {script_name}
:budget_cap 600

; Variable definitions
;
; Const string to define the direction in which difficulties are cycles through
; false = Easy to Impossible
; true = Impossible to Easy
:const string order1 {diff_list(true)}
:const string order2 {diff_list(false)}

:local bool additional_cond
; add an additional condition that can lead to exiting
;
; Timer variables
:local double game_time
:local double end_time
:local double seconds
:local double minutes
:local double hours
;
:local int instance
;
:local string difficulty_list
;
; Macros for configuration in source
#additional_cond global.bool.get("Pokota:Stop")

key.{start}()
key.{cycling}()
key.{mode}()
key.{difficulty}()
;
key.{exit}()
key.{stats}()
key.{restart}()

close.headquarters()
; Attempt to hide the UI when leaving HQ

; Attempt to 
game.newround()
;
; Detects if any of the invalid buildings are open
#opened_building {lua(\
  local acc = {};\
  local isOpen = [[isopen("%s")]];\
  local buildings = table.pack(\
    "tradingpost", "powerplant",\
    "factory", "laboratory", "shipyard",\
    "workshop", "arcade", "museum",\
    "constructionfirm", "statueofcubos", "mine"\
  );\
  for i = 1, #buildings do\
    acc[1 + #acc] = isOpen:format(buildings[i]);\
  end\
  return table.concat(acc, " || ");\
)}

; If the impulse is exit, stats or restart, it must be done in towertesting
contains(\
  "key.{start}|key.{mode}|key.{cycling}|key.{difficulty}|close.headquarters",\
  impulse()\
) || isTowerTesting()
;
; Prevent multiple exit() instances being created
; Only 1 should be made
impulse() != "key.{exit}" ||\
{job.get} != "</size><color=#0AFF00>Exit caused by pressing key.{exit}"

;
; We can only interact with the script if we're in a game of TowerTesting
; inside of the HQ, in TowerTesting or in of town. Unfortunately, there's no way to ensure
; we're activated outside of the game Perfect Space.
isTowerTesting() || not(isBossFight() || {opened_building})


; Condition that specifies the line number of the action the user might want to modify
#condition_comment.info {lua(\
  local msg = table.pack(\
    "</size><br>",\
      "additional_cond adds an additional condition ",\
      "that could be met to exit tower testing<br>",\
      "<br>seconds, minutes and hours reprezent how much time ",\
      "you want to pass in real world seconds before exiting tower testing",\
      "<br>Leave all at 0 if you don't want this",\
    "<size=0>"\
  );\
  return table.concat(msg)\
)}

contains(\
  concat("click here for line info!<size=0>", "{condition_comment.info}"),\
  ""\
)
#condition_comment.line {lua(\
  local msg = table.pack(\
    "</size><br>",\
      "<br>additional_cond is found on line ",\
      [[" . additional_cond_pos . "]],\
    "<size=0>"\
  );\
  return table.concat(msg);\
)}

contains(\
  concat("click here for line numbers!<size=0>", "{condition_comment.line}"),\
  ""\
)

; Start of code

; Set the seconds, minutes and hours
; After this time has elapsed, you'll exit towertesting
seconds = 0.0
minutes = arithmetic.double(0.0, "*", 60.0)
hours = arithmetic.double(0.0, "*", 60.0 * 60.0)

; Don't change the difficulty list if diff_mode is set and user didn't request a difficulty change
; If the user did request a change, only change it if we're in config mode or if we're active
difficulty_list = if(\
  {diff_mode.get} != "" && (\
    impulse() != "key.{difficulty}" ||\
    not(isopen("headquarters") ||({status.get} != (impulse() == "key.{start}")))\
  ),\
  {diff_mode.get},\
  if({diff_mode.get} == order2, order1, order2)\
)

; Determine our instance number
instance = s2i(sub({hider.get}, 0, 1), 0) + 1

; Begin the block hider
; This variable holds the number of instances currently running and the game time
; There shouldn't ever be more than 2 instances, but this gives room for a max of 90
{hider.set(instance . if(\
  impulse() == "game.newround",\
  "0.0",\
  sub({hider.get}, 1, 99)\
))}
;
; The difficulty variable holds a counter and the current coordinate
; The counter is used to decide what we're doing based on the mode.
; It uses index("ABCDEFGHIJKLMN", sub(diff, 0, 1), 0) + 1 to count up
; A = 0, B = 1 and N = 14. Thus, I can determine what to do by simply using a contains()
;
; How changing difficulty is determined:
; If we're in mode1, we're always moving to the next difficulty. If we're in mode2, we only move
; to the next difficulty after we've counted up to 15
;
; How changing region is determined:
; If mode1, we only change the region when our counter is at A. If mode2, we always move to the
; next region
;
:const string counting_string "ABCDEFGHIJKLMN"
;
; The hider is shut off with a </size> block if the script is running
; or if start/cycling/mode were pressed while inside the headquarters/towertesting menu
{diff.set(\
  if(\
    {diff.get} != "" && {status.get} != (impulse() == "key.{start}")\
    && not(contains("key.{difficulty}|key.{mode}|game.newround", impulse())),\
    sub({diff.get}, 0, 8),\
    sub(\
      counting_string,\
      arithmetic.int(\
        index(counting_string, sub({diff.get}, 0, 1), 0) +\
        if(impulse() == "game.newround", 1, 0),\
        if({status.get}, "mod", ""),\
        if(\
          {curent_mode.get} == mode1 ||\
          (impulse() == "key.{mode}" && {curent_mode.get} == mode2), 5, 14)\
      ),\
      1\
    ) . sub(\
      {lua(--[[Determine if we change the difficulty or not]])}\
      if(\
        impulse() == "key.{difficulty}" || {diff.get} == "" ||\
        {curent_mode.get} == mode1 || \
        (impulse() == "key.{mode}" && {curent_mode.get} == mode2) ||\
        contains({diff.get}, "N"),\
        difficulty_list,\
        {diff.get}\
      ),\
      {lua(--[[/*\
        * Determine the index.\
        * We change nothing if our impulse is\
      */]])}\
      if(\
        impulse() == "key.{difficulty}" || {diff.get} == "" ||\
        {curent_mode.get} == mode1 || \
        (impulse() == "key.{mode}" && {curent_mode.get} == mode2) ||\
        contains({diff.get}, "N"),\
        if(\
          impulse() == "game.newround",\
          s2i(sub({diff.get}, 1, 2), 0),\
          index(difficulty_list, sub({diff.get}, 1, 2), 0)\
        ),\
        1\
      ),\
      7\
    )\
  ) . if(\
    isopen("headquarters") || isopen("towertesting")\
    || ({status.get} != (impulse() == "key.{start}")),\
    "</size>",\
    "{if_debugging(<line-height=0>)}"\
  )\
)}

;
{status.set({status.get} != (impulse() == "key.{start}"))}
;
; Only toggle the region_cycling switch if we're running or we're in the HQ
{region_cycling.set({region_cycling.get} != (\
  ({status.get} || isopen("headquarters")) &&\
  (impulse() == "key.{cycling}")\
))}

; Keep the mode unchanged if we're initialized and the user
{curent_mode.set(if(\
  {curent_mode.get} != "" && (\
    impulse() != "key.{mode}" ||\
    not(isopen("headquarters") || {status.get})\
  ),\
  {curent_mode.get},\
  if({curent_mode.get} == mode2, mode1, mode2)\
))}

{diff_mode.set(difficulty_list)}

; Set the job status
; If we're shut down, stop the hiding block
; If we're running and the user requested an exit, set the `Exit caused` message
; otherwise, don't change the value
{job.set(if(\
  {status.get},\
  if(\
    impulse() != "key.{exit}",\
    {job.get},\
    "</size><color=#0AFF00>Exit caused by pressing key.{exit}</color>"\
  ),\
  "</size>{if_debugging(</line-height>)}</size>"\
))}

; Determine where we're going
; If we're the first instance and we've just started up, we enter the loop
; Otherwise, we're called for a qol or an irelevant impulse
; If this is a qol impulse, we must be in towertesting to perform it
goto(if(\
  {status.get} && impulse() == "key.{start}" && instance == 1,\
  if(isTowerTesting(), loop, movement_manager),\
  if(\
    contains("key.{exit}|key.{stats}|key.{restart}", impulse()) && isTowerTesting(),\
    if(\
      impulse() == "key.{exit}",\
      exit,\
      if(impulse() == "key.{stats}", stats, restart)\
    ),\
    end\
  )\
))

quit:
; We're here only if we shut down. This can't softlock us, because
; movement_manager ensures we've started a new round
; This waitwhile is in place to slow us down (intentionally) so that we can exit towertesting
waitwhile(isopen("towertesting"))

loop:
end_time = now() + 1e7 * (seconds + minutes + hours)
; Set our end time. If this is just now(), it'll get ignored
;
; Update our job
{job.set(if(\
  {status.get},\
  "</size><color=#0AFF00>Waiting to exit Tower Testing</color>",\
  "</size>{if_debugging(</line-height>)}</size>"\
))}

in_towertesting:
waitframe()

game_time = s2d(sub({hider.get}, 1, 99), 0.0) + time.delta()
; Update our game time. The hider stores it after the instance count
; Do not lose the instance count
{hider.set(sub({hider.get}, 0, 1) . d2s(game_time))}

additional_cond_pos:
additional_cond = {additional_cond}

; Rather complicated gotoif
; We stay in towertesting for as long as we're running, not dead and
; we haven't meat our additional condition
; If the end_time offset is 0.0 (default), then our end_time will be ignored
; Otherwise, we'll exit once the time of seconds, minutes and hours summed together is elapsed
gotoif(\
  in_towertesting,\
  {status.get} && health(false) > 0.0 && not(additional_cond) && (\
    seconds + minutes + hours == 0.0 ||\
    now() <= end_time\
  )\
)

; Don't modify the job if we exited because of key.exit
; Otherwise, mention the reason we ended the run
{job.set(if(\
  contains({job.get}, "Exit caused by") || not({status.get}),\
  {job.get},\
  "</size><color=#0AFF00>Exit caused by " . if(\
    additional_cond,\
    "additional_cond",\
    if(isTowerTesting(), "tower death", "an external cause")\
  ) . "</color>"\
))}

exit:
wait(time.unscaled() * 1.5)
; We try to exit.
; This isn't a fixed value because it depends on the device
; I've found that this operation results in the best amount of time
;
; A waitframe() is too quick and it causes lag
exit()

; Keep trying to exit if we're in towertesting.
; Then, we continue over to the movement manager if we're still running
goto(if(\
  isTowerTesting(),\
  exit,\
  if({status.get} && impulse() == "key.{start}", movement_manager, end)\
))

movement_manager:
{job.set(if(\
  {status.get},\
  "</size><color=#FAA00F>User must " . if(\
    isopen("headquarters"),\
    "exit the headquarters",\
    "close the window opened in town"\
  ) . "</color>",\
  {job.get}\
))}
;
; We can only be activated if in the HQ, town or TT menu
; The only places where show("towertesting", true) won't work are
; if we're inside hq, town/infinity perks menus
; Thus, we must give a warning if we're in HQ or assume that town has an opened window

waitwhile(not(isopen("towertesting")) && anyopen() && {status.get})
; This will make us wait for as long as we're running and we're not in towertesting and
; a window is open. 

show("towertesting", true)
; Enter the TT menu
;
; Determine if we're able to change regions
; 
goto(if(\
  {status.get},\
  if(\
    {region_cycling.get} && (\
      ({curent_mode.get} == mode1 && contains({diff.get}, "A")) ||\
      ({curent_mode.get} == mode2 && not(contains({diff.get}, "A")))\
    ) && end_time > 0.0,\
    change_region,\
    enter_towertesting\
  ),\
  end\
))

change_region:
waitframe()

; click on the arrow to change region
{click.relative(290.0/800.0, 201.0/450.0, 0.0, 1.0)}

enter_towertesting:
; Click on the difficulty
; diff.get has a 1-character counter, a length-2 position and a 5 character 
{click.relative(395.0/800.0, s2d(sub({diff.get}, 3, 5), 0.0)/450.0, 0.0, 1.0)}

; Launch a round of towertesting
{click.relative(162.0/800.0, 97.0/450.0, 0.0, 1.0)}

gotoif(if({status.get}, loop, end), isTowerTesting() || not({status.get}))

waitframe()
goto(enter_towertesting)

; The user requested a restart
restart:
restart()
goto(end)

; The user requested the stats be shown
; This clicks in the general area of the button where
; resource/sec, xp/sec and frags obtained are seen
stats:
waitframe()
{click.relative(260.0/800.0, 275.0/450.0, 0.5, 0.5)}

end:
; Subtract 1 from the number of instances, as we've just removed an instance
{hider.set(i2s(s2i(sub({hider.get}, 0, 1), 0) - 1) . sub({hider.get}, 1, 99))}