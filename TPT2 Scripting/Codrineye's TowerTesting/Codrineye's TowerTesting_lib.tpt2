#script_name Codrineye's TowerTesting
; Easy naming scheme to follow

; Script identifier value
#identifier "Condineye's TowerTesting"

; impulse key macros for easy customization
; there's a const declaration at the bottom of the script
; to prevent the same impulse from being assigned
; 
#state_switch x
; 
#mode_switch q
#cycling w
; 
#restart r
#exit e
#stats t

; variable macros for improved visibility in the source code
; a display var hides the identifier to prevent screen clutter
; 
; a var impulse can be added to a display var if
; it's modified by an impulse, this uses the lua function
; instead of the ingame function so that the value is pre-computed
#display_var(name) "<size=0>" . {identifier} . "</size>" . "{name}"
#var_impulse(impulse) ({lua(return string.upper([[{impulse}]]))})

; block hider
; it prevents the variables from being hidden
; but hides them when it should
#hider concat("<size=0>", "Variable Hider") . {identifier}

; the state of the script
#state {display_var(status)} . "{var_impulse({state_switch})}"
#state.get global.bool.get({state})
#state.set(value) global.bool.set({state}, {value})

; if region cycling is enabled or not
#region_cycling {display_var(Region Cycling)} . "{var_impulse({cycling})}"
#region_cycling.get global.bool.get({region_cycling})
#region_cycling.set(value) global.bool.set({region_cycling}, {value})

; which mode is selected
; curent_mode is the last global variable that gets initialised
; thus, setting a value to it will ensure the hiding block is stopped
#curent_mode {display_var(Curent Mode)} . "{var_impulse({mode_switch})}"
#curent_mode.get global.string.get({curent_mode})

; mode values, so it's easy to edit
#mode1 "Difficulty>Region" . "</size>"
#mode2 "Region>Difficulty" . "</size>"

; simple lua macro for recording coordinates

{lua(\
  difficulty = {};\
  max_difficulty_digits = 0;\
)}
#set_difficulty(coord_y) {lua(\
  difficulty[1 + #difficulty] = [[{coord_y}]];\
  max_difficulty_digits = math.max(\
    max_difficulty_digits, \
    #[[{coord_y}]]\
  );\
)}

{set_difficulty(290.0)}
{set_difficulty(256.0)}
{set_difficulty(217.0)}
{set_difficulty(182.0)}
{set_difficulty(145.0)}
{set_difficulty(112.0)}


; const variables to make the difficulty logic easier to follow
:const int coord_size {lua(return max_difficulty_digits)}
:const int difficulty_count {lua(return #difficulty)}

#difficulty_list {lua(\
  local diff_list = {};\
  diff_list[1 + #diff_list] = [["]];\
  for i = 1, #difficulty do\
    diff_list[1 + #diff_list] = difficulty[i];\
  end\
  diff_list[1 + #diff_list] = [["]];\
  return table.concat(diff_list);\
)}
#inversed_difficulty_list {lua(\
  local diff_list = {};\
  diff_list[1 + #diff_list] = [["]];\
  for i = #difficulty, 1, -1 do\
    diff_list[1 + #diff_list] = difficulty[i];\
  end\
  diff_list[1 + #diff_list] = [["]];\
  return table.concat(diff_list)\
)}

; safety const declarations to prevent
; the same impulse key from repeating
:const double {state_switch} 1.0
:const double {mode_switch} 1.0
:const double {cycling} 1.0
:const double {exit} 1.0
:const double {stats} 1.0
:const double {restart} 1.0


; 
; guide for size for when I make changes to the script
; this is simply a marker that represents the size of my laptop screen
; I keep lines under this line so it's easy to edit when on laptop
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 