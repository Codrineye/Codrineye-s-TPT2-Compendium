#script_name Codrineye's TowerTesting
; Easy naming scheme to follow

; impulse key macros for easy customization
#state_switch x
#mode_switch q
#cycling w
#restart r
#exit e
#stats t

{lua(\
  TowerTest = {};\
  TowerTest.impulse = {};\
  TowerTest.diff = {};\
  TowerTest.max_digits = 0;\
  \
  --[[/*\
    * Go through all impulse keys and\
    * prevent compilation if there's duplicate keys\
  */]]\
  local impulse = {};\
  local keys = table.pack(\
    "{state_switch}", "{mode_switch}", "{cycling}",\
    "{restart}", "{exit}", "{stats}"\
  );\
  for i = 1, #keys do\
    if impulse[keys[i]] ~= nil then\
      error("every key impulse must mean a different key", 0);\
    end\
    impulse[keys[i]] = true;\
  end\
)}

; variable macros for improved visibility in the source code
; a display var hides the script identifier to make it less likely
; that the var gets changed by another script
; 
{lua(\
  local security_prefix = "<size=0>{script_name}</size>";\
  \
  --[[/*\
    * Used to add an impulse to the display_var\
    * value in `impulse` has no whitespace and is never empty\
    * Throws an error if the same impulse controls multiple vars\
    * \
    * Returns the impulse as an uppercase string encased in\
    * parenthesies ()\
    * add_impulse(a) returns `(A)`\
  */]]\
  local function add_impulse(impulse)\
    if TowerTest.impulse[impulse] == true then\
      local err_msg = table.pack(\
        "Variables cannot be controlled by the same impulse\n",\
        "Impulse '", impulse, "' has been used before!"\
      );\
      error(table.concat(err_msg), 0);\
    end\
    TowerTest.impulse[impulse] = true;\
    return string.format("(%s)", string.upper(impulse));\
  end\
  \
  --[[/*\
    * Used to create the name of a global variable\
    * meant to be visible in the global variables overlay.\
    * \
    * security_toggle is a bool that determinse if\
    * this variable gets the security prefix or not.\
    * \
    * var_name is the string that represents this variable\
    * \
    * impulse is the triggered impulse for this variable\
    * if it doesn't have one, nothing will be added\
  */]]\
  function TowerTest.display_var(var_name, security_toggle, impulse)\
    local var = {};\
    var[1] = security_toggle and security_prefix or "";\
    var[2] = var_name;\
    local impulse_val = impulse:gsub(" ", "");\
    if impulse_val ~= "" then\
      var[3] = add_impulse(impulse_val);\
    end\
    return string.format([["%s"]], table.concat(var));\
  end\
)}

#display_var(name, secured, impulse) {lua(\
  return TowerTest.display_var([[{name}]], {secured}, [[{impulse}]]);\
)}

; block hider
; used to control when the global variables are shown or hidden 
#hider concat("<size=0>", "Variable hider") . "{script_name}"
:const string stop_hiding "Stop Hiding"

; the state of the script
:const string state_var {display_var(Active, true, {state_switch})}
#state.get global.bool.get(state_var)
#state.set(value) global.bool.set(state_var, {value})

; if region cycling is enabled or not
:const string cycle_var {display_var(Region Cycling, true, {cycling})}
#region_cycling.get global.bool.get(cycle_var)
#region_cycling.set(value) global.bool.set(cycle_var, {value})

; which mode is selected
:const string mode_var {display_var(Curent Mode, true, {mode_switch})}
#curent_mode.get global.string.get(mode_var)
#curent_mode.set(mode) global.string.set(mode_var, {mode})

; mode values, so it's easy to edit
:const string mode1 "Difficulty>Region"
:const string mode2 "Region>Difficulty"

; Variable used to tell the user what the AI is doing
:const string job_status "<size=0>{script_name}Job Status"
#job.get global.string.get(job_status)
#job.set(job) global.string.set(job_status, {job_message({job})})
#job_message(job) "</size>" . {job} . "</size>"
; job_status starts a hiding block, which is ended by the first </size>
; and then, it ends the hiding block started by {hider} with the final
; </size>

; Detects if there's a building open
#opened_building {lua(\
  local acc = {};\
  local isOpen = [[isopen("%s")]];\
  local buildings = table.pack(\
    "towertesting", "tradingpost", "powerplant",\
    "factory", "laboratory", "shipyard",\
    "workshop", "arcade", "museum",\
    "headquarters", "constructionfirm",\
    "statueofcubos", "mine"\
  );\
  for i = 1, #buildings do\
    acc[1 + #acc] = isOpen:format(buildings[i]);\
  end\
  return table.concat(acc, " || ");\
)}

; simple lua macro for recording coordinates
#set_difficulty(coord_y) {lua(\
  TowerTest.diff[1 + #TowerTest.diff] = {coord_y};\
  if TowerTest.max_digits < #[[{coord_y}]] then\
    TowerTest.max_digits = #[[{coord_y}]];\
  end\
)}

{set_difficulty(290.0)}
{set_difficulty(256.0)}
{set_difficulty(217.0)}
{set_difficulty(182.0)}
{set_difficulty(145.0)}
{set_difficulty(112.0)}

; const variables to make the difficulty logic easier to follow
:const int coord_size {lua(return TowerTest.max_digits)}
:const int difficulty_count {lua(return #TowerTest.diff)}

; Simple lua macro that outputs the difficulty list based on
; the inputed number. Negative number = reversed list and
; Positive number = normal list
#diff_list(mode) {lua(\
  local reversed = {mode};\
  local diff = TowerTest.diff;\
  local fmt = string.format("%%0%ds", TowerTest.max_digits);\
  local diff_list = {};\
  for i = 1, #diff do\
    diff_list[i] = reversed and diff[#diff + 1 - i] or diff[i];\
    diff_list[i] = fmt:format(diff_list[i]);\
  end\
  return string.format([["%s"]], table.concat(diff_list));\
)}
