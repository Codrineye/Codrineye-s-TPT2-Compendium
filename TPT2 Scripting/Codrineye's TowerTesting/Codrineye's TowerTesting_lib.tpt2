#script_name Codrineye's TowerTesting
; Easy naming scheme to follow

; Script identifier value
#identifier "{script_name}"

; impulse key macros for easy customization
; there's a const declaration at the bottom of the script
; to prevent the same impulse from being assigned
; 
#state_switch x
#mode_switch q
#cycling w
#restart r
#exit e
#stats t

{lua(\
  TowerTest = {};\
  TowerTest.impulse = {};\
  TowerTest.diff = {};\
  TowerTest.max_digits = 0;\
)}

; variable macros for improved visibility in the source code
; a display var hides the identifier to prevent screen clutter
; 
#display_var(name, impulse) {lua(\
  local impulse = string.gsub([[{impulse}]], " ", "");\
  --[[Isolate the impulse key and check if it's already been used]]\
  if TowerTest.impulse[impulse] then\
    error("2 variables cannot be controlled by the same impulse");\
  end\
  TowerTest.impulse[impulse] = true;\
  \
  local var = table.pack(\
    "<size=0>", [[{script_name}]], "</size>",\
    "{name}"\
  );\
  if impulse ~= "" then var[5] = string.format("(%s)", impulse:upper()); end\
  return string.format([["%s"]], table.concat(var));\
)}

; block hider
; used to control when the global variables are shown or hidden 
#hider concat("<size=0>", "Variable hider") . {identifier}
:const string stop_hiding {display_var(Stop hiding variables,)}

; the state of the script
:const string state_var {display_var(state, {state_switch})}
#state.get global.bool.get(state_var)
#state.set(value) global.bool.set(state_var, {value})

; if region cycling is enabled or not
:const string cycle_var {display_var(Region Cycling, {cycling})}
#region_cycling.get global.bool.get(cycle_var)
#region_cycling.set(value) global.bool.set(cycle_var, {value})

; which mode is selected
; curent_mode is the last global variable that gets initialised
; thus, setting a value to it will ensure the hiding block is stopped
:const string mode_var {display_var(Curent Mode, {mode_switch})}
#curent_mode.get global.string.get(mode_var)
#curent_mode.set(mode) global.string.set(mode_var, {mode})

; mode values, so it's easy to edit
:const string mode1 "Difficulty>Region</size>"
:const string mode2 "Region>Difficulty</size>"

; simple lua macro for recording coordinates

#set_difficulty(coord_y) {lua(\
  TowerTest.diff[1 + #TowerTest.diff] = [[{coord_y}]];\
  TowerTest.max_digits = math.max(\
    TowerTest.max_digits,\
    #[[{coord_y}]]\
  )\
)}

{set_difficulty(290.0)}
{set_difficulty(256.0)}
{set_difficulty(217.0)}
{set_difficulty(182.0)}
{set_difficulty(145.0)}
{set_difficulty(112.0)}

; const variables to make the difficulty logic easier to follow
:const int coord_size {lua(return TowerTest.max_digits)}
:const int difficulty_count {lua(return #TowerTest.diff)}

; Simple lua macro that outputs the difficulty list based on
; the inputed number. Negative number = reversed list and
; Positive number = normal list

#diff_list(mode) {lua(\
  local reversed = {mode} < 0;\
  local diff = TowerTest.diff;\
  local diff_list = {};\
  for i = 1, #diff do\
    diff_list[i] = reversed and diff[#diff + 1 - i] or diff[i];\
  end\
  return string.format([["%s"]], table.concat(diff_list));\
)}

; safety const declarations to prevent
; the same impulse key from repeating
:const double {state_switch} 1.0

:const double {mode_switch} 1.0
:const double {cycling} 1.0
:const double {exit} 1.0
:const double {stats} 1.0
:const double {restart} 1.0

; 
; guide for size for when I make changes to the script
; this is simply a marker that represents the size of my laptop screen
; I keep lines under this limit so it's easy to edit when on laptop
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 
