:import Cods Spell Compactor

; Welcome to the configuration
; This is the only area you have to make changes to
; Here you will configure the following properties
; *  what active modules you want to be used
; *  the order in which you want them to be used
; *  the timings of the activation
; *  and lastly
; *  if the module is placed, you will have to specify the coordinates
; 
; you have 3 functions at your disposal:
; All of these macros generate :const string <token> 'contents'
; 
; syncronize_module_activation()
; This macro will create a token sync<sync count> containing the value 'module_count - 1'
; You will need to specify the amount of modules you want to activate at this time and
; a delay to the activation, if you so please
; This will make it so you have module_count sync scripts active at once
; The excess scripts will remove themselves after spell activation
; 
; add_active_module.type()
; This macro will create a token spellname<spell count> containing the following values
; 'spell_timer' . 'coord_x' . 'coord_y' . 'attribute' . 'spell_name' . ';'
; 
; add_active_module.instant()
; The first type of addition, where you need to specify the spell name and the timer
; coord_x and coord_y are 0.0 and the attribute is 'instant '
; the extra ' ' is there for consistent spacing
; 
; add_active_module.grounded()
; The second type of addition, where you need to specify everything field
; The field meaning spell_name, spell_timer, coord_x and coord_y
; the attribute for it is 'grounded'
; 
; I do not recommend defining a ground module as an instant module nor vice versa
; the system will accept your input, but you will not cast anything

{syncronize_module_activation(3, 0.0)}
{add_active_module.instant(barrier.temporal, 0.0)}
{add_active_module.instant(spell.floof, 0.0)}

{syncronize_module_activation(4, 0.0)}
{add_active_module.instant(spell.response.neutral, 0.0)}
{add_active_module.grounded(spell.void, 0.0, 0.0, 0.0)}

{add_active_module.grounded(spell.something, 0.5, 12.0, 10.0)}

{syncronize_module_activation(4, 0.0)}
{add_active_module.instant(spell.snapOfDestiny, 1.0)}
{add_active_module.instant(spell.recharge, 1.0)}
{add_active_module.instant(spell.cooling, 1.0)}
{add_active_module.grounded(spell.something, 1.0, 5.0, 15.0)}

{syncronize_module_activation(4, 0.0)}
{add_active_module.instant(spell.response.neutral, 2.0)}
{add_active_module.grounded(spell.void, 2.0, 0.0, 0.0)}

{add_active_module.instant(spell.snapOfDestiny, 3.0)}

{syncronize_module_activation(7, 0.0)}
{add_active_module.instant(spell.snapOfDestiny, 28.0)}
{add_active_module.instant(spell.refresh, 28.0)}
{add_active_module.instant(spell.recharge, 28.0)}
{add_active_module.instant(barrier.temporal, 28.0)}
{add_active_module.instant(spell.floof, 28.0)}
{add_active_module.instant(spell.snapOfDestiny, 28.0)}

{syncronize_module_activation(3, 0.0)}
{add_active_module.instant(spell.cooling, 29.0)}
{add_active_module.instant(spell.recharge, 29.0)}

{syncronize_module_activation(4, 0.0)}
{add_active_module.grounded(spell.void, 29.0, 0.0, 0.0)}

{add_active_module.grounded(spell.something, 30.5, 12.0, 10.0)}

{syncronize_module_activation(7, 0.0)}
{add_active_module.instant(spell.snapOfDestiny, 31.0)}
{add_active_module.instant(spell.recharge, 31.0)}
{add_active_module.instant(spell.refresh, 31.0)}
{add_active_module.instant(barrier.temporal, 31.0)}
{add_active_module.grounded(spell.something, 31.0, 5.0, 15.0)}

{add_active_module.instant(spell.snapOfDestiny, 33.0)}

{syncronize_module_activation(4, 0.0)}
{add_active_module.instant(spell.snapOfDestiny, 57.0)}


; These are the constants you'll be dealing with
; It's more convenient to put them at the end of this file rather than copy them
; Putting the const declaration here is also beneficial since it shows you can
; create separate sequences if need be
; Such as for a fragment AI

:const int spells_count {lua(return #spell.active_module.module_instance)}

:const int sync_precision {lua(return spell.sync_precision)}
:const int time_precision {lua(return 2 + spell.timer_precision)}
:const int placement_precision {lua(return 2 + spell.placement_precision)}
:const int attribute_size {lua(return spell.attribute_size)}

:const int increment {lua(return spell.max_name_size)}

