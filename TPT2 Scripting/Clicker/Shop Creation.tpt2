; 
; Package made to create an
; item and page registering system
; 1 lua macro to perform all actions
; 
; initialisation of all variables present in this script
; create the root table `shop`
; all items are stored in the table shop.item
; shop.max_length updates dynamically to mark the
; maximum length of all inputs read
; 
; the shop.text table is used for text inputs
; max_name_size and max_description_size update
; as the inputs are being recorded
; .text_ending_marker is a character added to the
; end of a text to make the retrieving of text easier
; 
; shop.precision stores variables used to
; format the numbers as best as possible
; .price has the maximum value between itsself and
; the number of digits the inputed price has
; .effect has the maximum value between itself and
; the number of digits of
; the maximum between click/idle effects
; 
; the system is not made to support negative numbers
; but with some tweeking, it likely could
; 
; .contents_saver is a dummy variable
; it is used in calculating page sizes, by having
; the count of recordings that had been made since
; the last time this function got called
; .max_page_size has the maximum between its value and
; the number of digits of the count of item recordings made
; since the previous page creation
; 
; 
; local functions cannot be accessed outside of this lua macro
; these functions are used for simple tasks not worth repeating
; 
; local function x_digit_precision(digits, input)
; This function is an edited version of what's used in my clicks compactor
; it creates a local number, and gives it the value of the input
; with the removed spaces afterwards, the fuction
; returns a formatted string, that has <digits> amount of 0's infront
; the value of digits uses shop.precision.<input type>
; 
; time for the local functions
; x_digit_precision(digits, input)
; we create a local `number` that converts the
; input into a string with none of the spaces
; the function then returns the formatted string
; such that the number has as many 0's infront of it
; as the number of digits we want
; 
; text_formatting() taken in a text input
; we create a local `input` that replaces all instances
; of ';' with a ',' and then
; return the `input` to no longer have whitespace
; before and after the text input and adds the ending
; character at the end
; As an example
;   text_formatting('  yah;oo  ow ')
;   will return 'yah,oo  ow|'
; everything inbetween ''
; 
; time for the global functions
; add_item() takes in:
;  * the price
;  * the effect given per second
;  * the effect given per click
;  * the item name
;  * the item description
; we take our shop_index and create a table `new_item`
; new_item.price is given the tonumber() value of price
; tonumber() converts its input into a number, or empty string
; if the input is not a number
; we then compare .precision.price with the number of
; characters inside of new_item.price, but converted to a string
; create a new table new_item.effect() and add .idle and .click to it
; perform the same dance with .precision.effect like with precision.price
; Format the names accordingly and update max_name/description_size
; update max_length to the absolute values, add the new item to shop.item
; create an item_name that replaces all spaces inside of name with `_` and
; return :local int item_name shop_index
; 
; shop.concat_items() 
; 
; 
{lua(\
  shop = {};\
  shop.item = {};\
  shop.max_length = 0;\
  shop.text = {};\
  shop.text.max_name_size = 0;\
  shop.text.max_description_size = 0;\
  shop.text.text_ending_marker = [[|]];\
  shop.precision = {};\
  shop.precision.price = 0;\
  shop.precision.effect = 0;\
  shop.page = {};\
  shop.max_page_size = 0;\
  shop.contents_saver = 0;\
\
  local function x_digit_precision(digits, input)\
    local number = tostring(input):gsub(" ", "");\
    return string.sub(\
      string.format("%0" .. digits .. "f", number),\
      1,\
      digits + 2\
    );\
  end\
  local function text_formatting(text)\
    local input = text:gsub(";", ",");\
    return input:gsub("^ +", ""):gsub(" +$", "") .. shop.text.text_ending_marker;\
  end\
\
  function shop.add_item(price, effect_idle, effect_click, name, description)\
    local shop_index = 1 + #shop.item;\
    local new_item = {};\
    new_item.price = math.tointeger(price);\
    shop.precision.price = math.max(\
      #tostring(new_item.price) - 1,\
      shop.precision.price\
    );\
    new_item.effect = {};\
    new_item.effect.idle = math.tointeger(effect_idle);\
    new_item.effect.click = math.tointeger(effect_click);\
    shop.precision.effect = math.max(\
      #tostring(math.max(new_item.effect.idle, new_item.effect.click)) - 1,\
      shop.precision.effect\
    );\
    new_item.name = text_formatting(name);\
    new_item.description = text_formatting(description);\
    shop.text.max_name_size = math.max(\
      shop.text.max_name_size,\
      #new_item.name\
    );\
    shop.text.max_description_size = math.max(\
      shop.text.max_description_size,\
      #new_item.description\
    );\
    shop.max_length = shop.precision.price \
      + shop.precision.effect + shop.precision.effect\
      + shop.text.max_name_size + shop.text.max_description_size;\
    shop.item[shop_index] = new_item;\
    local item_name = name:gsub("^ +", ""):gsub(" +$", ""):gsub(" ", "_");\
    return [[:const int ]] .. item_name .. [[ ]] .. shop_index;\
  end\
\
  function shop.concat_items()\
    local function repetition_string(big, small)\
      local space = big - small;\
      return string.rep('.', space);\
    end\
    local shop_items = #shop.item;\
    local items_concat = {};\
    for i = 1, shop_items do\
      items_concat[1 + #items_concat] = x_digit_precision(\
        shop.precision.effect,\
        shop.item[i].effect.click\
      );\
      items_concat[1 + #items_concat] = x_digit_precision(\
        shop.precision.effect,\
        shop.item[i].effect.idle\
      );\
      items_concat[1 + #items_concat] = x_digit_precision(\
        shop.precision.price,\
        shop.item[i].price\
      );\
      items_concat[1 + #items_concat] = shop.item[i].name;\
      items_concat[1 + #items_concat] = repetition_string(\
        shop.text.max_name_size,\
        #shop.item[i].name\
      );\
      items_concat[1 + #items_concat] = shop.item[i].description;\
      items_concat[1 + #items_concat] = repetition_string(\
        shop.text.max_description_size,\
        #shop.item[i].description\
      );\
    end\
    return table.concat(items_concat);\
  end\
\
  function shop.add_page()\
    local page_index = 1 + #shop.page;\
    local new_page = {};\
    new_page.count = #shop.item - shop.contents_saver;\
    new_page.size = #tostring(new_page.count);\
    shop.max_page_size = math.max(\
      shop.max_page_size,\
      new_page.size\
    );\
    shop.page[page_index] = new_page;\
    shop.contents_saver = #shop.item;\
    return [[:const int page]] .. page_index .. [[ ]] .. page_index;\
  end\
\
  function shop.concat_pages()\
    local page_count = #shop.page;\
    local page_fitter = shop.max_page_size;\
    local pages_concat = {};\
    for i = 1, page_count do\
      pages_concat[1 + #pages_concat] = x_digit_precision(\
        shop.max_page_size,\
        shop.page[i].count\
      );\
    end\
    return table.concat(pages_concat);\
  end\
)}

#add_item(name, effect_click, effect_idle, description, price) {lua(return shop.add_item(\
  [[{price}]],\
  [[{effect_idle}]],\
  [[{effect_click}]],\
  [[{name}]],\
  [[{description}]]\
))}
#add_page(page) {lua(return shop.add_page())}


