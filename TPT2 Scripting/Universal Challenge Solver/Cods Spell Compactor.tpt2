:name Lua Madness
; 
; Package found on discord or on my github repo
; discord: https://discord.com/channels/488444879836413975/1275961817151307847/1275961817151307847
; github: https://github.com/Codrineye/Codrineye-s-TPT2-Compendium/blob/main/TPT2%20Scripting/Codrineye's%20Compact%20Spell-Caster/README.md
; 
; This macro handles every single action
; The way it works is by creating a string value
; :const string spellname<spell number> 'data given for the spell'
; you will get a string dictated as the following values
; 
; A timer for the module activation, this works in conjunction with winemast
;   this timer is cut/extended to contain the number of digits seen
;   in spell.timer_precision
; 
; A coordinate x for the module, if this spell is placed
;  similarly to our timer, this too is cut but it is linked
;  to spell.placement_precision
; Coordinate y is the same as coordinate x
; 
; An attribute that is either 'instant ' or 'grounded'
;   This is always sized 8 characters
; That permits active modules to be used without a delay
; 
; And finally, the spell name
; It is the internal spell name, followed by a ';' to mark its end
; 
; an extra function of this macro is to create a "sync" constant
; This constant is given a precision dictated by spell.sync_precision
; 
; There is no need to look beneath this, sync already
; has you covered on the activation sequence
; The only requirement is that you have the following macros
;  * a pointer macro that "points" to our curent index block
;  * a pointer_get that gets the value of your pointer
;  * a pointer_set that updates your pointer via the pre-defined 'increment'
;  * a timer macro that indicates the winemast timer
;  and finally
;  * a timer_get macro, that retrieves the value of our timer
; 
; All of these macros are defined inside of winAI_lib
; 
; 

{lua(\
  debugging = false;\
  spell = {};\
  spell.active_module = {};\
  spell.active_module.module_instance = {};\
  spell.active_module.placement_positions = {};\
  spell.active_module.synchronization = {};\
  spell.sync_delay = 0.0;\
  spell.sync_precision = 2;\
  spell.timer_precision = 6;\
  spell.placement_precision = 4;\
  spell.attribute_size = 8;\
  spell.max_name_size = 0;\
  spell.batch = {};\
  spell.batch_instance = 1;\
  spell.batch_max_size = 0;\
\
  local function x_digit_precision(digits, input)\
    return string.sub(string.format("%." .. digits .. "f", input), 1, digits + 2);\
  end\
\
  function spell.add_spell(name, timer, attribute, coord_1, coord_2)\
    local excess = table.pack(coord_1, coord_2);\
    local spell_index = 1 + #spell.active_module.module_instance;\
  \
    local batch_update = 1;\
    if spell.batch[spell.batch_instance] ~= nil then\
      batch_update = batch_update + spell.batch[spell.batch_instance];\
    end\
    spell.batch_max_size = math.max(\
      spell.batch_max_size, \
      batch_update\
    );\
    spell.batch[spell.batch_instance] = batch_update;\
  \
    local new_spell = {};\
    new_spell.name = string.gsub(name, " ", "");\
    local synchronization_timer_delay = 0.0;\
    if #spell.active_module.synchronization ~= 0 then\
      local synchronization_index = #spell.active_module.synchronization;\
      local synchronization_parent = spell.active_module.synchronization[synchronization_index].name;\
      synchronization_timer_delay = spell.sync_delay * (spell_index - synchronization_parent);\
    end\
    \
    new_spell.timer = x_digit_precision(spell.timer_precision, synchronization_timer_delay + timer);\
    new_spell.attribute = string.gsub(attribute, " ", "");\
    local attribute_fit = string.rep([[.]], spell.attribute_size);\
    new_spell.attribute = string.sub(new_spell.attribute .. attribute_fit, 1, spell.attribute_size);\
    new_spell.identifier = [[spellname]] .. spell_index;\
    \
    if excess[1] == nil then\
      excess[1] = 0.0;\
    end\
    if excess[2] == nil then\
      excess[2] = 0.0;\
    end\
    new_spell.coords = {};\
    new_spell.coords[1] = x_digit_precision(spell.placement_precision, excess[1]);\
    new_spell.coords[2] = x_digit_precision(spell.placement_precision, excess[2]);\
    new_spell.constant = new_spell.timer .. \
      new_spell.coords[1] .. new_spell.coords[2] .. \
      new_spell.attribute .. new_spell.name;\
    new_spell.name_size = spell.sync_precision + #new_spell.constant;\
    \
    spell.active_module.module_instance[spell_index] = new_spell;\
    spell.active_module.placement_positions[spell_index] = new_spell.coords;\
    spell.max_name_size = math.max(\
      spell.max_name_size, \
      new_spell.name_size\
    );\
    return [[:const string ]] .. new_spell.identifier .. \
      [[ ']] .. new_spell.constant .. [[']];\
  end\
\
  function spell.concatinate_spell_names()\
    print("run");\
    local batch = 1;\
    local inc = 1;\
    local spells_concat = {};\
    local sync = 1;\
    if spell.active_module.synchronization[sync] == nil then\
      spell.active_module.synchronization[sync] = {};\
      spell.active_module.synchronization[sync].name = {};\
      spell.active_module.synchronization[sync].name = 0;\
      print(spell.active_module.synchronization[sync].name);\
    end\
    \
    local function batch_loop()\
      for i = 1, spell.batch[batch] do\
        if debugging == true then\
          print("spell(" .. i .. ") in batch(" .. batch .. ") limit to " .. spell.batch[batch]);\
          print("inc = " .. inc);\
          print("sync(" .. sync .. ")" .. spell.active_module.synchronization[sync].name);\
        end\
        if inc == spell.active_module.synchronization[sync].name then\
          spells_concat[1 + #spells_concat] = [[" . sync]] .. sync .. [[ . "]];\
          sync = math.min(sync + 1, #spell.active_module.synchronization);\
        else\
          spells_concat[1 + #spells_concat] = string.sub(math.floor(10 ^ spell.sync_precision), 2);\
        end\
        spells_concat[1 + #spells_concat] = [[" . spellname]] .. inc .. [[ . "]];\
        spells_concat[1 + #spells_concat] = string.rep(\
          [[.]], \
          spell.max_name_size - spell.active_module.module_instance[inc].name_size\
        );\
        if debugging == true then\
          print(spell.batch[batch] .. "-" .. i .. ">" .. 0);\
          print(spell.batch[batch] - i > 0);\
        end\
        inc = inc + 1;\
      end\
    end\
    \
    spells_concat[1] = [["]];\
    while (batch < spell.batch_instance) or (inc < #spell.active_module.module_instance) do\
      if debugging == true then\
        print("spell.batch[" .. batch .. "] = " .. spell.batch[batch]);\
        print(batch .. "<" .. spell.batch_instance);\
        print(batch < spell.batch_instance);\
        print(inc .. "<" .. #spell.active_module.module_instance);\
        print(inc < #spell.active_module.module_instance);\
      end\
      batch_loop();\
      if debugging == true then\
        print("\n" .. "inc = " .. inc .. "\n");\
      end\
      local spacer = spell.batch_max_size - spell.batch[batch];\
      spacer = spacer * spell.max_name_size;\
      spells_concat[1 + #spells_concat] = string.rep([[.]], spacer);\
      batch = math.min(\
        batch + 1,\
        spell.batch_instance\
      );\
    end\
    \
    spells_concat[#spells_concat + 1] = [["]];\
    return table.concat(spells_concat);\
  end\
\
  function spell.synchronize(copies, delay)\
    local sync_amount = copies - 1;\
    local sync = {};\
    sync.count = math.floor(10 ^ spell.sync_precision + sync_amount);\
    sync.name = 1 + #spell.active_module.module_instance;\
    local sync_index = 1 + #spell.active_module.synchronization;\
    spell.active_module.synchronization[sync_index] = sync;\
    spell.sync_delay = delay;\
    return [[:const string sync]] .. sync_index .. [[ ']] .. string.sub(\
      sync.count, \
      spell.sync_precision\
    ) .. [[']];\
  end\
\
  function spell.add_batch()\
    local batch_checkpoint = spell.batch_instance;\
    local batch_recording = 0;\
    if spell.batch[batch_checkpoint] ~= nil then\
      batch_recording = spell.batch[batch_checkpoint];\
    end\
    spell.batch[batch_checkpoint] = batch_recording;\
    spell.batch_instance = batch_checkpoint + 1;\
    return [[:const int batch]] .. batch_checkpoint .. [[ ]] .. batch_recording;\
  end\
)}

#synchronize_module_activation(modules_count, added_dellay) {lua(\
  return spell.synchronize(\
    [[{modules_count}]], \
    [[{added_dellay}]]\
  );\
)}
#add_active_module.instant(spell_name, spell_timer) {lua(\
  return spell.add_spell(\
    [[{spell_name};]], \
    [[{spell_timer}]], \
    [[instant]],\
    0.0,\
    0.0\
  );\
)}
#add_active_module.grounded(spell_name, spell_timer, spell_location_x, spell_location_y) {lua(\
  return spell.add_spell(\
    [[{spell_name};]], \
    [[{spell_timer}]], \
    [[grounded]], \
    {spell_location_x}, \
    {spell_location_y}\
  );\
)}
#add_batch {lua(\
  return spell.add_batch()\
)}

; This is the macro that concatinates every
; added active module together
#active_module_list {lua(\
  return spell.concatinate_spell_names();\
)}

