:import budget exec_lib
:name {accelerate_budget}
; Set the scripts name
; This is its own package so that people can have scripts called "accelerate"
; without interfering with this package

:budget_cap 200
; budget cap of 200 so that every action is done instantly

global.string.set(budget_exec_var, "</size>")
; Signal to any scripts that use this library that we're up and running.
; If the user shuts us off afterwards, that's on them, as we can't protect against that
;
; We're woken up by our init script, which is outside the package, so that we're started before
; any other script that might require us.
;
; budget_exec_var isn't set in the init script, as no other script is meant to interact with it
; we're the ones that scripts use, so init should make sure that we're working properly


stop(impulse())
; Stop the script that has called us and remove all instances of the parent from the execution queue
;
; Start the script that we just stopped so it can continue execution
execute(impulse())