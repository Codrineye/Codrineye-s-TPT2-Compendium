; Script that defines multiple helper lua functions
; that let you easily build and return large expressions
; by using a lua macro instead of multiple line breaks
; 
; Building expressions in lua can greately improve script
; readability and maintinability if used correctly

{lua(\
  --[[Easy way for the user to encase a value]]\
  function value_encase(value)\
    return string.format('(%s)', value);\
  end\
  --[[root var get and its "children"]]\
  function editor_varGet(var_type, data_type, var_name)\
    return string.format('%s.%s.get(%s)', var_type, data_type, var_name);\
  end\
  \
  function editor_get_globalVar(data_type, var_name)\
    return editor_varGet("global", data_type, var_name);\
  end\
  function editor_get_localVar(data_type, var_name)\
    return editor_varGet("local", data_type, var_name);\
  end\
  \
  --[[handle most string/bool/arithmetical operations]]\
  function editor_math(leftVal, op_name, right_val)\
    return string.format("%s %s %s", leftVal, op_name, right_val);\
  end\
  function editor_prim_math(leftVal, op_name, right_val)\
    return string.format('%s, %s, %s', leftVal, op_name, right_val);\
  end\
  function editor_prim_compare(data_type, leftVal, op_name, rightVal)\
    local comparison = editor_prim_math(leftVal, op_name, rightVal);\
    return string.format('comparison.%s(%s)', data_type, comparison);\
  end\
  function editor_prim_arithmetic(dataType, leftVal, op_name, rightVal)\
    local arithmetic = editor_prim_math(leftVal, op_name, rightVal);\
    return string.format('arithmetic.%s(%s)', dataType, arithmetic);\
  end\
  function editor_not(value_to_negate)\
    return string.format("not(%s)", value_to_negate);\
  end\
  function editor_if(condition, val_true, val_false)\
    local if_contents = table.pack(condition, val_true, val_false);\
    local if_statemant = editor_prim_math(table.unpack(if_contents));\
    return string.format("if(%s)", if_statemant);\
  end\
  function editor_contains(parent_string, checker_string)\
    local contains = table.pack(parent_string, checker_string);\
    return string.format("contains(%s, %s)", table.unpack(contains));\
  end\
  function editor_len(string_value)\
    return string.format("len(%s)", string_value);\
  end\
  function editor_index(parent_string, checker_string, offset)\
    local index = table.pack(parent_string, checker_string, offset);\
    return string.format('index(%s, %s, %s)', table.unpack(index));\
  end\
  function editor_concat(left_string, right_string)\
    return string.format('concat(%s, %s)', left_string, right_string)\
  end\
  function editor_sub(parent_string, offset, length)\
    local substring = table.pack(parent_string, offset, length);\
    return string.format('sub(%s, %s, %s)', table.unpack(substring));\
  end\
  function editor_lower(string_to_manipulate)\
    return string.format('lower(%s)', string_to_manipulate);\
  end\
  function editor_upper(string_to_manipulate)\
    return string.format('upper(%s)', string_to_manipulate);\
  end\
  function editor_floor(floor_value)\
    return string.format('floor(%s)', floor_value);\
  end\
  function editor_ceil(ceil_value)\
    return string.format('ceil(%s)', ceil_value);\
  end\
  function editor_round(round_value)\
    return string.format('round(%s)', round_value);\
  end\
  function editor_sin(sin_value)\
    return string.format('sin(%s)', sin_value);\
  end\
  function editor_cos(cos_value)\
    return string.format('cos(%s)', cos_value);\
  end\
  function editor_tan(tan_value)\
    return string.format('tan(%s)', tan_value);\
  end\
  function editor_asin(asin_value)\
    return string.format('asin(%s)', asin_value);\
  end\
  function editor_acos(acos_value)\
    return string.format('acos(%s)', acos_value);\
  end\
  function editor_atan(atan_value)\
    return string.format('atan(%s)', atan_value);\
  end\
  function editor_atan2(atan2_value)\
    return string.format('atan2(%s)', atan2_value);\
  end\
  function editor_min(leftVal, rightVal)\
    return string.format('min(%s, %s)', leftVal, rightVal);\
  end\
  function editor_max(leftVal, rightVal)\
    return string.format('max(%s, %s)', leftVal, rightVal);\
  end\
  function editor_rnd(minVal, maxVal)\
    return string.format('rnd(%s, %s)', minVal, maxVal);\
  end\
  function editor_vector_xCoord(vector_value)\
    return string.format('vec2.x(%s)', vector_value);\
  end\
  function editor_vector_yCoord(vector_value)\
    return string.format('vec2.y(%s)', vector_value);\
  end\
  function editor_vec(vector_coord_x, vector_coord_y)\
    local vector = table.pack(vector_coord_x, vector_coord_y);\
    return string.format('vec(%s, %s)', table.unpack(vector));\
  end\
  function editor_convertDataType(originType, desiredType, value)\
    return string.format('%s2%s(%s)', originType, desiredType, value);\
  end\
  function editor_convertFromString(desiredType, value, fallback)\
    return string.format('s2%s(%s, %s)', desiredType, value, fallback);\
  end\
  function editor_convertIntToDouble(value)\
    return editor_convertDataType("i", "d", value);\
  end\
  function editor_convertIntToString(value)\
    return editor_converDataType("i", "s", value);\
  end\
  function editor_convertDoubleToInt(value)\
    return editor_convertDataType("d", "i", value);\
  end\
  function editor_convertDoubleToString(value)\
    return editor_convertDataType("d", "s", value);\
  end\
  function editor_convertStringToInt(value, fallback)\
    return editor_convertFromString("i", value, fallback);\
  end\
  function editor_convertStringToDouble(value, fallback)\
    return editor_convertFromString("d", value, fallback);\
  end\
  function editor_visibilityGet(windowID)\
    return string.format('visibility.get(%s)', windowID);\
  end\
  function editor_childVisibilityGet(windowID, elementID);\
    local windowStr = 'child.visibility.get(%s, %s)';\
    return string.format(windowStr, windowID, elementID);\
  end\
  function editor_isopen(roomID)\
    return string.format('isopen(%s)', roomID);\
  end\
  function editor_resource(resourceID)\
    return string.format('resource(%s)', resourceID);\
  end\
  function editor_softwareEnabled(softwareID)\
    return string.format('software.enabled(%s)', softwareID);\
  end\
  function editor_softwareFind(softwareName)\
    return string.format('software.find(%s)', softwareName);\
  end\
  function editor_towerHealth(percentage)\
    return string.format('tower.health(%s)', percentage);\
  end\
  function editor_towerEnergy(percentage)\
    return string.format('tower.energy(%s)', percentage);\
  end\
  function editor_towerShield(percentage)\
    return string.format('tower.shield(%s)', percentage);\
  end\
  function editor_moduleCooldown(module_index)\
    local cooldown = 'tower.module.cooldown(%s)';\
    return string.format(cooldown, module_index);\
  end\
  function editor_highscoreWave(region, difficulty)\
    local highscore = 'highscore.wave(%s, %s)';\
    return string.format(highscore, region, difficulty);\
  end\
  function editor_highscoreEra(region, difficulty)\
    local highscore = 'highscore.era(%s, %s)';\
    return string.format(highscore, region, difficulty);\
  end\
  function editor_highscoreInfinity(region, difficulty)\
    local highscore = 'highscore.infinity(%s, %s)';\
    return string.format(highscore, region, difficulty);\
  end\
  function editor_disableCost(element_name)\
    return string.format('disable.cost(%s)', element_name);\
  end\
  function editor_activeID(active_spell_name)\
    return string.format('active.id(%s)', active_spell_name);\
  end\
  function editor_workerPaused(workerID)\
    return string.format('worker.paused(%s)', workerID);\
  end\
  function editor_workerGroup(workerID)\
    return string.format('worker.group(%s)', workerID);\
  end\
  function editor_workerName(workerID)\
    return string.format('worker.name(%s)', workerID);\
  end\
  function editor_workerTask(workerID)\
    return string.format('worker.task(%s)', workerID);\
  end\
  function editor_adventureCountEntities(entityType)\
    return string.format('adventure.countEntities(%s)', entityType);\
  end\
  function editor_adventureHasItem(item_name)\
    return string.format('adventure.hasItem(%s)', item_name);\
  end\
  function editor_adventureIsWall(tile_coords)\
    return string.format('adventure.isWall(%s)', tile_coords);\
  end\
  function editor_adventureIsBomb(tile_coords)\
    return string.format('adventure.isBomb(%s)', tile_coords);\
  end\
  function editor_adventureIsEnemy(tile_coords)\
    return string.format('adventure.isEnemy(%s)', tile_coords);\
  end\
  function editor_adventureIsCompleted(room_coords)\
    return string.format('adventure.isCompleted(%s)', room_coords);\
  end\
  function editor_adventureEntityType(tile_coords)\
    return string.format('adventure.entityType(%s)', tile_coords);\
  end\
  function editor_isMachineActive(machine_name)\
    return string.format('active(%s)', machine_name)\
  end\
  function editor_countFactoryItems(item_name, item_tier)\
    return string.format('count(%s, %s)', item_name, item_tier);\
  end\
  function editor_CountItemsInMachine(machine_name)\
    return string.format('machine.item.count(%s)', machine_name);\
  end\
  function editor_factoryItemInMachine(machine_name)\
    return string.format('machine.item(%s)', machine_name);\
  end\
  function editor_findFactoryItem(item_name)\
    return string.format('factory.find(%s)', item_name);\
  end\
  function editor_marketPreference(stone_element)\
    return string.format('museum.pref(%s)', stone_element);\
  end\
  function editor_isMarketSlotLocked(stone_index)\
    return string.format('museum.isLocked(%s)', stone_index);\
  end\
  function editor_museumFreeSlots(target_menu)\
    return string.format('museum.freeSlots(%s)', target_menu);\
  end\
  function editor_maxStoneTier(element)\
    return string.format('museum.maxTier(%s)', element);\
  end\
  function editor_slotTier(offerSlot)\
    return string.format('museum.slotTier(%s)', offerSlot);\
  end\
  function editor_trashTier(trashSlot)\
    return string.format('museum.trashTier(%s)', trashSlot);\
  end\
  function editor_slotElement(offerSlot)\
    return string.format('museum.slotElement(%s)', offerSlot);\
  end\
  function editor_trashElement(trashSlot)\
    return string.format('museum.trashElement(%s)', trashSlot);\
  end\
)}
