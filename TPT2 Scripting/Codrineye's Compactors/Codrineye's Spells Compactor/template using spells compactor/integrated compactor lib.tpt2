:import example_text library

; 
; In this library, I will give you
; the tools needed to integrate a
; script that executes the spells
; stored inside of the :const string
; 'actives' in your AI
; 
; I do not personally recommend
; doing this, as it can take up
; more space in scripts, but
; I recognize that not everybody
; likes to rely on the existance of
; a script for their blueprint to work

; 
; One more warning
; if you're planning on integrating
; the compactor internally
; and your Spell Config includes
; batches, I strongly recommend
; you avoid the headache that comes
; with making batches work internally
; 
; the stand-alone compactor was made partly
; to deal with batches in an easy manner
; by having the user select the part of
; actives they would like to be executed
; 

; 
; Additional mention
; if you want to integrate the compactor
; in your script, you would probably
; prefer not to include Spell Compact resources
; all-together, as it has so many macros you
; might be annoyed at how many names are taken
; 
; do not remove the import yet, however
; as that would cause the editor to
; throw macro errors, which could be annoying
; 

; 
; To integrate the compactor in your AI
; you will need 2 systems
; 
; a system that activates your spells
; a timer system
; 

; 
; the timer system is already taken care of
; for you, as Spell Compactor resources
; defines the timer macros
; {timer}, {timer.get}, {timer.set()}
; and {timer.add()}
; 
; these are
; the timer variable name
; get the timer variable value
; set the timer variable value
; add this ammount to the timer variable
; 
; to get the timer, you
; need a basic winemast ticker
; 

; 
; The spell activation system requires
; a pointer variable
; 
; as you've seen in the blueprint AI caller
; you have the macros {pointer}
; {pointer.get} and {pointer.set()}
; at your disposal, and for the most part
; that's all you need, but thanks to
; how the compactor cycling system works
; you can define pointer.increment like 
; 

#pointer.increment {pointer.set(\
  ({pointer.get} + 1) % spells_count\
)}

; 
; as this will go through every spell inside
; the string `actives`
; 
; if you don't want it to loop forever, you can
; simply remove the (% spells_count) part
; 
