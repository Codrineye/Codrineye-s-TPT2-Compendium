:import integrated compactor lib
:name {package(Compactor sync)}

; 
; This is the sync script
; if you are sure you want
; to integrate the compactor sync
; to your AI, please make sure
; you understand how the sync works
; 

#actives.displace(sync, timer, positions) position + (\
  {sync} * sync_precision + \
  {timer} * time_precision + \
  {positions} * placement_precision\
)

#actives.substring(sync, timer, positions, length) sub(\
  actives,\
  {actives.displace({sync}, {timer}, {positions})},\
  {length}\
)

#actives.index(sync, timer, positions) index(\
  actives,\
  text_end_character,\
  {actives.displace({sync}, {timer}, {positions})}\
) - ({actives.displace({sync}, {timer}, {positions})})

; 
; These are the same functions
; you will find inside of Spell Compactor lib
; but they've been modified to use
; the const values at the bottom of
; your Spell Config
; instead of internal macros
; 


:budget_cap 50

; 
; We set a budget of 50 just
; so we're going through this fast
; 
; 
; order it's memorised internally for 
; easier updates and convenience
; 
; sync + timer + coord_x + coord_y + name

; 
; helper consts for control
; const string for sync check
; sync_precision is unlikely to reach 50
; in execution
; 
; const double threshold for time keeping
; 
:const string sync_needed '{lua(return string.rep("0", 50))}'
:const double threshold 50.0

; 
; local helper values to 
; relieve the system of stress
; 
:local int position
:local int syncronize_copies
:local bool copy_activator
:local double timer

; check if we're a copy
; 
copy_activator = contains(impulse(), "{package(sync)}")

; main loop
; we assign position our curent position
; and increment our pointer
; 
check:
position = {pointer.get}

; 
; Then, check if we're being used
; if not, we exit, otherwise
; check if our helper const string
; contains our sync
; if it doesn't, we don't have any copies
; so se can skip syncronization
; otherwise, if we're not a copy, we enter
; syncronization
; 

goto(if(\
  health(false) > 0.0,\
  if(\
    copy_activator || not(contains(\
      sync_needed, \
      {actives.substring(0, 0, 0, sync_precision)}\
    )),\
    skip,\
    syncronize\
  ),\
  99\
))

; we set our timer, and wait to activate it
; we don't let false passes through if
; our {timer.get} is smaller than our
; spell timer
; and finally, we use both instand and grounded
; spells of that
; 
; you cannot activate an instant
; spell with useposition, and you cannot
; activate a position spell with useinstant
; 
skip:
{pointer.increment}

timer = s2d(\
  {actives.substring(1, 0, 0, time_precision)},\
  0.0\
)
waitwhile({timer.get} % timer > threshold || {timer.get} < timer)
useinstant(active.index(\
  {actives.substring(\
    1, 1, 2, \
    {actives.index(1, 1, 2)}\
  )}\
))
useposition(\
  active.index(\
    {actives.substring(\
      1, 1, 2, \
      {actives.index(1, 1, 2)}\
    )}\
  ), vec(\
    s2d({actives.substring(1, 1, 0, placement_precision)}, 0.0),\
    s2d({actives.substring(1, 1, 1, placement_precision)}, 0.0)\
  )\
)

; we then return to check only if
; we're the root pointer
goto(if(copy_activator, 99, check))

; if there's copies to be made
; we keep them in syncronize_copies
; and create copies of sync as long as
; there's copies to be made
; 
; we end this by having our root position
; at the final spell
; 

syncronize:
syncronize_copies = s2i(\
  {actives.substring(0, 0, 0, sync_precision)},\
  0\
)

copy:
syncronize_copies = syncronize_copies - 1
execute("{package(Compactor sync)}")
goto(if(syncronize_copies < 0, check, copy))
