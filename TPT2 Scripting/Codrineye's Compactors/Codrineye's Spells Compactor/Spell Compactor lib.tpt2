:import Spell Compactor resources
#package(name) {spell_compactor_package({name})}

; 
; This is the stand-alone spell compactor
; importing this should be the first action
; performed if you're using the compactor
; 

#identifier "Spell Compactor"

#pointer.increment {pointer.set(({pointer.get} + 1) % {spells_count.get})}

; 
; spells_count        = precision_count
; spell_size          = spells_size
; sync_precision      = precision_sync
; time_precision      = precision_timer
; placement_precision = precision_placement
; text_end_character  = text_ending_character
; actives             = active_spells
; 

#spells_count "iternal" . "count_precision" . {identifier}
#spells_count.get global.int.get({spells_count})
#spells_count.set(value) global.int.set({spells_count}, {value})

#spell_size "internal" . "spells_size" . {identifier}
#spell_size.get global.int.get({spell_size})
#spell_size.set(value) global.int.set({spell_size}, {value})

#sync_precision "internal" . "precision_sync" . {identifier}
#sync_precision.get global.int.get({sync_precision})
#sync_precision.set(value) global.int.set({sync_precision}, {value})

#time_precision "internal" . "precision_time" . {identifier}
#time_precision.get global.int.get({time_precision})
#time_precision.set(value) global.int.set({time_precision}, {value})

#placement_precision "internal" . "precision_placement" . {identifier}
#placement_precision.get global.int.get({placement_precision})
#placement_precision.set(value) global.int.set({placement_precision}, {value})


#text_end_character "internal" . "text_ending_character" . {identifier}
#text_end_character.get global.string.get({text_end_character})
#text_end_character.set(value) global.string.set({text_end_character}, {value})

#actives "internal" . "active_spells" . {identifier}
#actives.get global.string.get({actives})
#actives.set(value) global.string.set(\
  {actives},\
  ({value}) . {hider.close}\
)

#compactor_type "external"
