
{lua(\
  Spell = {};\
  \
  --[[Table holding information needed for debugging]]\
  Spell.debug = {};\
  Spell.debug.can_log = false;\
  Spell.debug.can_halt = false;\
  Spell.debug.halt_limit = 0;\
  Spell.debug.can_display = false;\
  Spell.debug.concat_format = "";\
  \
  --[[Table holding information needed for recording]]\
  Spell.active = {};\
  Spell.active.space = 0;\
  Spell.active.sync_ammount = 0;\
  \
  --[[Table that has spell_compactor data]]\
  Spell.comp = {};\
  Spell.comp.active = {};\
)}

; macros for communicating with the compactors debugging system
#spell_debug {lua(Spell.debug.halt())}
#spell_debug.add_breakpoint {lua(\
  Spell.debug.can_display = true;\
  Spell.debug.halt();\
)}

#spell_debug.log(level) {lua(Spell.debug.can_log = {level})}
#spell_debug.can_halt(level) {lua(\
  Spell.debug.can_halt = {level};\
)}

#spell_debug.recordings_before_halt(limit) {lua(\
  Spell.debug.halt_limit = {limit};\
)}
#spell_debug.display_spells(level) {lua(\
  Spell.debug.can_display = {level};\
)}
#spell_debug.display_format(format) {lua(\
  Spell.debug.concat_format = {format};\
)}

{lua(\
  --[[Internal method to terminate the program for debugging]]\
  local spell_debug_stop = false;\
  \
  function Spell.comp.recorded_blueprint(name, loopable)\
    --[[/*\
        * This function is used to mark the end\
        * of a blueprint recording to start making another recording\
        * \
        * It returns a const int that holds how much space you used up\
        * so that you can take a substring of the compacted string\
        * more easily\
        * \
        * blueprint_name is used to create the const int name\
        * loopable_blueprint determines if this is a blueprint sequence\
        * that gets looped or not\
       */]]\
    if loopable then\
      local active_index = #Spell.comp.active;\
      Spell.comp.active[active_index].loop_sign = "#";\
      --[[/*\
          * Changes the loop sign to `#` so that we can\
          * easily check it with a contains of the full spell\
         */]]\
    end\
    local bp_name = name:match('%b""'):sub(2, -2);\
    bp_name = string.format("blueprint_%s", bp_name);\
    \
    local space = Spell.active.space;\
    return string.format(":const int %s %s", bp_name, space)\
  end\
  function Spell.comp.sync(spell_ammount)\
    --[[/*\
        * The synchronization system prevents the\
        * script from refreshing the budget untill\
        * all synchronized spells have been used.\
       */]]\
    \
    local sync = tonumber(spell_ammount);\
    assert(sync >= 0, "Trying to add a negative sync_ammount");\
    --[[Synchronizing less than 1 spell is meaningless]]\
    \
    sync = sync - 1;\
    --[[/*\
        * We subtract 1 from the sync_ammount\
        * to cover the first spell\
        * \
        * Sync_ammount always gets overwritten\
       */]]\
    Spell.active.sync_ammount = sync;\
  end\
  \
  function Spell.comp.add_spell(name, timer, coord_x, coord_y)\
    --[[Function that records a spell]]\
    \
    local dbug = Spell.debug;\
    local halt_limit = dbug.halt_limit == 0 and dbug.can_halt;\
    --[[/*\
        * Check if we should halt the program\
        * \
        * We halt if our halt limit has been reached\
        * or if our spell_debug_stop flag has been set to true\
       */]]\
    if halt_limit or spell_debug_stop then\
      Spell.debug.halt();\
    end\
    \
    local match_string = [[%b""]];\
    local active_name = name:match(match_string):sub(2, -2);\
    \
    local actives_index = 1 + #Spell.comp.active;\
    local new_spell = {};\
    \
    new_spell.loop_sign = "/";\
    --[[/*\
        * loop sign is by default "/" to show that nothing happens\
        * aka, our pointer is increased by 2 + space.\
        * \
        * When loop_sign is "#", our pointer is reset to 0\
        * to loop our sequence\
       */]]\
    new_spell.sync = "/";\
    \
    local used_space = 2;\
    --[[/*\
        * Recordings take up space, we keep track\
        * of how much space has been used with used_space\
        * used_space is currently 2 because, sync and loop_sign\
        * are length-1 signals\
       */]]\
    local sync = Spell.active.sync_ammount;\
    if sync > 0 then\
      new_spell.sync = "s";\
      Spell.active.sync_ammount = sync - 1;\
    end\
    --[["s" means that the script skips refreshing the budget.]]\
    new_spell.name = active_name;\
    \
    local parameters = table.pack(timer, coord_x, coord_y);\
    local spell_values = table.pack("timer", "coord_x", "coord_y");\
    \
    for i, variable in ipairs(spell_values) do\
      local value = tonumber(parameters[i]);\
      new_spell[variable] = {};\
      new_spell[variable] = 0.0 + value\
      --[[/*\
          * the addition with 0.0 here is to guarantee \
          * the correct data type.\
          * timer, coord_x and coord_y need to be doubles \
          * for the actions waitwhile() and vec().\
          * float and double are the same type in this editor\
         */]]\
    end\
    spell_values[4] = "name";\
    for _, variable in ipairs(spell_values) do\
      new_spell[variable] = string.format("%s|", new_spell[variable]);\
      used_space = used_space + #new_spell[variable];\
      --[[/*\
          * string.format converts the value in\
          * new_spell[variable] into a string. Meaning that\
          * I no longer have to convert the value to a string myself\
         */]]\
    end\
    \
    local internal_space = used_space;\
    local prev = -1\
    while prev ~= used_space do\
      prev = used_space;\
      new_spell.space = string.format("%s|", used_space);\
      used_space = internal_space + #new_spell.space;\
    end\
    --[[/*\
        * Add the extra space taken up by our signal bits\
        * and space recording.  We add our space here so that\
        * we don't have to pass through the entire string an extra time\
       */]]\
    \
    Spell.comp.active[actives_index] = new_spell;\
    Spell.active.space = Spell.active.space + used_space;\
    \
    local logging_check = dbug.can_halt or dbug.can_log;\
    if logging_check then Spell.debug.log() end\
    \
    if dbug.can_halt then\
      Spell.debug.halt_limit = dbug.halt_limit - 1;\
    end\
    --[[/*\
        * Check if we're logging or\
        * if compilation should be halted\
        * \
        * Remember that dbug is the same as Spell.debug\
        * in this function\
       */]]\
    local spell_number = string.format("spell_%s", actives_index);\
    local const_txt = ":const int %s %s";\
    return const_txt:format(spell_number, Spell.active.space);\
  end\
  \
  function Spell.comp.concat_actives()\
    local spells = {};\
    --[[table holding the compacted data]]\
  \
    local actives = Spell.comp.active;\
    local dbug = Spell.debug;\
    --[[access our recordings]]\
    \
    local actives_count = #actives;\
    --[[nr of recordings]]\
    \
    actives[actives_count].loop_sign = "#";\
    --[[Set the last sign to # to enable sequence looping]]\
    \
    local concat_debug = {};\
    concat_debug.format = "";\
    concat_debug.separation = "";\
    concat_debug.bit_format = "";\
    concat_debug.spell_data = "%s";\
    concat_debug.chunk_end = "";\
    \
    if dbug.can_display then\
      concat_debug.format = dbug.concat_format;\
      concat_debug.separation = " ";\
      concat_debug.bit_format = dbug.concat_format .. "Bit signal %s = ";\
      concat_debug.spell_data = dbug.concat_format .. "%s  %s";\
      concat_debug.chunk_end = "End of recording %s";\
    end\
    \
    for i = 1, actives_count do\
      --[[/*\
          * Spell data is compacted in the order\
          * \
          * loop_sign\
          * sync signal\
          * space\
          * timer\
          * coord_x coord_y\
          * name\
         */]]\
      local active_data = actives[i];\
      local spell_data = table.pack(\
        concat_debug.format,\
        \
        concat_debug.bit_format:format("loop"), active_data.loop_sign,\
        --[[Adds the loop_sign bit]]\
        \
        concat_debug.bit_format:format("sync"), active_data.sync,\
        --[[adds the sync signal bit]]\
        \
        concat_debug.spell_data:format(active_data.space, #active_data.space),\
        --[[Adds the space we take up]]\
        concat_debug.spell_data:format(active_data.timer, #active_data.timer),\
        --[[Adds the spell timer]]\
        concat_debug.spell_data:format(active_data.coord_x, #active_data.coord_x),\
        --[[Adds the spells x coord]]\
        concat_debug.spell_data:format(active_data.coord_y, #active_data.coord_y),\
        --[[Adds the spells y coord]]\
        concat_debug.spell_data:format(active_data.name, #active_data.name),\
        --[[Adds the spells name]]\
        \
        concat_debug.format, concat_debug.chunk_end:format(i)\
      );\
      \
      for _, data in ipairs(spell_data) do\
        spells[1 + #spells] = data;\
      end\
    end\
    \
    local str_fmt = [["%s"]]\
    return str_fmt:format(table.concat(spells));\
  end\
  function Spell.debug.log()\
    --[[/*\
        * Function handles logging logic.\
        * It can only be called from Spell.comp.add_spell\
        * \
        * logging is performed through print() to not stop compilation\
       */]]\
    local active = Spell.comp.active;\
    local spell_index = #active;\
    local spell = active[spell_index];\
    \
    local logging_text = table.pack(\
      "%s| Spell has %s: '%s'\n"\
    ); --[[/*\
           * list of the logging messages\
           * There were more messages here, but they've been\
           * removed.\
           * \
           * I'm keeping it a table just in case I need\
           * to add more messages\
          */]]\
    local logging_values = table.pack(\
      "name",\
      "sync", "loop_sign",\
      "timer", "coord_x", "coord_y", "space"\
    ); --[[/*\
        * List of values that get logged\
        * in the same order they're listed here\
       */]]\
    \
    local values_index_for_space = 7\
    --[[Indicates what value means we're logging space]]\
    \
    local text = "| Logging spell number %s:\n|\n";\
    local log = text:format(spell_index);\
    --[[/*\
        * Our log is built within the string `log`;\
        * The string `text` is the text we're adding to the log\
        * and then we use string.format(text, log, other values)\
        * which is truncated to text:format(log, other values);\
       */]]\
    for i, value in ipairs(logging_values) do\
      text = logging_text[1];\
      local spell_value = spell[value] or "nil";\
      --[[/*\
          * Gets our logging_value\
          * If its respecitve value exists then \
          * * spell_value = spell[value]\
          * else\
          * * spell_value = "nil" to signal that\
          * * something has gone wrong\
          * \
        */]]\
      \
      local fmt = table.pack(log, value, logging_value);\
      if i == values_index_for_space then\
        text = "%s| Summing up to a total space of %s\n"\
        fmt = table.pack(log, logging_value);\
      end\
      log = text:format(table.unpack(fmt));\
    end\
    print(log);\
    --[[And finally, we print our formatted log]]\
  end\
  \
  function Spell.debug.halt()\
    --[[/*\
        * Function handles halting logic.\
        * It's access points are \
        * * Spell.comp.add_spell\
        * * Spell Config\
        * \
        * halting is performed through error() to stop compilation\
       */]]\
    local debug = Spell.debug;\
    local should_halt = debug.can_halt or debug.can_display;\
    if not should_halt then return end\
    --[[We return if we shouldn't halt]]\
    \
    local compactor = Spell.comp;\
    local halt_text = table.pack(\
      "\n", \
      "Compilation stopped, debug mode enabled\n", \
      "Output has been modified by a spell_debug macro"\
    );\
    if debug.can_log then\
      local halt_logging = table.pack(\
        "\n", \
        "Logging enabled, logs are visible ",\
        "in your browsers developer console"\
      );\
      for _, text in ipairs(halt_logging) do\
        halt_text[1 + #halt_text] = text;\
      end\
    end\
    if debug.can_display then\
      local halt_display = table.pack(\
        "\n", \
        "Output formatting enabled\n", \
        "Every component of the output will begin ",\
        "with the string inputed in ",\
        "spell_debug.display_format\n", \
        "Retrieving output showing ",\
        #compactor.active,\
        " "\
      );\
      if #compactor.active == 1 then\
        halt_display[9] = "recording";\
      else\
        halt_display[9] = "recordings";\
      end\
      halt_display[10] = compactor.concat_actives();\
      for _, text in ipairs(halt_display) do\
        halt_text[1 + #halt_text] = text;\
      end\
    end\
    error(table.concat(halt_text), 0);\
  end\
)}

; 
; Helper macros to make the user interact with the
; compactor in an easier manner
; 
; Returns a const int with the value of the current space occupied
#recorded_blueprint(name, can_loop) {lua(\
  return Spell.comp.recorded_blueprint([["{name}"]], {can_loop});\
)}

; Synchronize spell_count ammount of spell activations
#synchronize(spell_count) {lua(Spell.comp.sync({spell_count}))}

; general add_spell lua function call
#add_spell(name, timer, coord_x, coord_y) {lua(\
  return Spell.comp.add_spell(\
    [[{name}]],\
    [[{timer}]],\
    {coord_x},\
    {coord_y}\
  );\
)}

#add_spell.instant(name, timer) {add_spell(\
  "{name}",\
  {timer}, \
  0, \
  0\
)}

#add_spell.grounded(name, timer, coord_x, coord_y) {add_spell(\
  "{name}",\
  {timer},\
  {coord_x},\
  {coord_y}\
)}
