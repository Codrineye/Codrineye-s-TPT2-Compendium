:import Spell Compactor lib
:name {package(debugger)}

; 
; Script to visuallise the string
; it's dormant unless you explicitly
; activate it by setting debug_values to true
; 

key.x()

:local bool debug_values

:global string debugging

:local int position
:global int index

:global string sync
:global string time
:global string coord_x
:global string coord_y
:global string spell_name

; 
; if debug_values is set to true
; we only enter debugging if
; we got a value in actives
; 
; this ensures that accidental
; x presses do not lead to
; the hide blocker being placed
; in a random place in the UI
; 
debug_values = false

goto(if(\
  contains({actives.get}, {hider.close}), \
  if(debug_values, debug, no_debug), \
  99\
))

debug:

; when debugging, we instantly
; exit tower testing
; this is done
; 
exit()

debugging = "{lua(\
  local printer = {};\
  printer[1 + #printer] = "Spell Compactor has entered debugging";\
  printer[1 + #printer] = '\n';\
  printer[1 + #printer] = "To change this, go into" .. ' ';\
  printer[1 + #printer] = "{package(debugger)}" .. ' ';\
  printer[1 + #printer] = "and set debug_values to false" .. '\n';\
  printer[1 + #printer] = "Press x to cycle through" .. ' ';\
  printer[1 + #printer] = "your spells";\
  return table.concat(printer);\
)}"

index = {pointer.get}
position = index
sync = {actives.substring(0, 0, 0, {sync_precision.get})}
time = {actives.substring(1, 0, 0, {time_precision.get})}
coord_x = {actives.substring(1, 1, 0, {placement_precision.get})}
coord_y = {actives.substring(1, 1, 1, {placement_precision.get})}
spell_name = {actives.substring(1, 1, 2, {actives.index(1, 1, 2)})}

{pointer.increment}
goto(99)

no_debug:

debugging = "<size=0>"
index = index
sync = sync
time = time
coord_x = coord_x
coord_y = coord_y
spell_name = spell_name . "</size>"

