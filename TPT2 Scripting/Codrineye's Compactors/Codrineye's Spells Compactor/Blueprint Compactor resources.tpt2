
; 
; This is a library that declairs the naming scheme
; needed to use the spell compactor
; 
#blueprint_compactor Blueprint Compactor
#bp_res_idtfier B#C|
; 
#hider.start <size=0>
#hider.close </size>
; 
:const string hider.start "{hider.start}"
:const string hider.close "{hider.close}"
; 
:const string pointer_var "{hider.start}{bp_res_idtfier}I"
#pointer.get global.int.get(pointer_var)
#pointer.set(value) global.int.set(pointer_var, {value})
; 
:const string compactor_actives "{bp_res_idtfier}AAstr"
#comp_active.get global.string.get(compactor_actives)
#comp_active.set(str) global.string.set(compactor_actives, {str})
; 
:const string compactor_secures "{bp_res_idtfier}ASstr"
#comp_secure.get global.string.get(compactor_secures)
#comp_secure.set(str) global.string.set(compactor_actives, {str})
; 
:const string caller_ID "</size>{blueprint_compactor} caller"
#caller.get global.string.get(caller_ID)
#caller.set(caller_ID) global.string.set(caller_ID, {caller_ID})
; 
:const string timer_var "t"
#timer.get global.double.get(timer_var)
#timer.set(value) global.double.set(timer_var, {value})
#timer.add(value) {timer.set(({value}) + {timer.get})}
; 

; 
; Adds era securing capabilities
; 

{lua(\
  Era = {};\
  Era.elements = {};\
  Era.element_cost = {};\
)}

; helper macro so you can use set_priority easier
; the [[no parse blocks]] are recommended here to
; ensuse our input is a string
; 
; Use this to create the priority listing
; The macro doesn't check if it's a valid element since
; the editor checks for us :D
#set_priority(element_name) {lua(\
  local elems = Era.elements;\
  local name = [["{element_name}"]];\
  --[[/*\
      * Prevent recording the same element multiple times\
      * by checking if its name has already been read\
      * if it has, return to prevent another entry\
     */]]\
  if elems[name] ~= nil then\
    return;\
  end\
  local index = 1 + #elems;\
  elems[index] = name;\
  \
  local disable_era = [["disable.era(%s)"]]\
  Era.element_cost[index] = disable_era:format(elems[index]);\
  elems[name] = index;\
)}

; important thing to know about disable.cost(element)
; if we input an element we can't disable, disable.cost returns -1.0
; 
; Here we use this fact to create an if statement
; if(disable.cost("element"), "element", if(next_element))
; and we repeat this until our last recorded element
; that if statement is
; if(disable.cost("element"), "element", "last_element")
#disable.era {lua(\
  local elems = Era.elements;\
  local elem_costs = Era.elenent_cost;\
  \
  local condition_fmt = [[%s != -1]]\
  local if_fmt = [[if(%s, %s, %s)]];\
  \
  local last_element = elems[#elems];\
  for i = #elems - 1, 1, -1 do\
    local cost = elem_costs[i];\
    local condition = condition_fmt:format(cost);\
    local caseTrue = elems[i];\
    last_element = if_fmt:format(condition, case_true, last_element);\
  end\
  return last_element;\
)}

; Here we construct the condition for the bool ended_era
; ended_era = -<number_of_elements> == <sum_of_elements_cost>
#disabled_era {lua(\
  local elems = Era.elements;\
  local elem_costs = Era.element_cost;\
  \
  local sum_fmt = [[%s + %s]];\
  \
  local last_cost = elem_costs[#elems];\
  for i = #elements - 1, 1, -1 do\
    last_cost = sum_fmt:format(last_cost, elem_costs[i]);\
  end\
  local negative_costs = 0.0 - #elems;\
  local not_equal = [[%s != %s]]\
  return not_equal:format(negative_costs, last_cost);\
)}

