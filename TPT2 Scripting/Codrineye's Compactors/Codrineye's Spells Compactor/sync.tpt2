:import winAI_lib
:name {package(sync)}
 
#substring(value, size) sub(\
  actives, \
  index + {value}, \
  {size}\
)
#substring_index(search, value) index(\
  actives, \
  {search}, \
  index + {value}\
) - (index + {value})

:const double threshold 0.50

:local string spell_name
:local double timer
:local double placement_x
:local double placement_y
:local int index
:local int syncronize
:local bool copy_activator

copy_activator = contains(impulse(), "{package(sync)}")
check:
index = {pointer_get}
gotoif(if(\
    copy_activator, \
    skip, \
    syncronization_needed\
  ), false == contains("00", {substring(0, sync_precision)})\
)
skip:
{pointer_set(spell_size)}
timer = s2d(\
  {substring(sync_precision, time_precision)}, \
  0.0\
)
placement_x = s2d(\
  {substring(\
    sync_precision + time_precision, \
    placement_precision\
  )}, \
  0.0\
)
placement_y = s2d(\
  {substring(\
    sync_precision + time_precision + placement_precision, \
    placement_precision\
  )}, \
  0.0\
)
spell_name = {substring(\
  sync_precision + time_precision + placement_precision + placement_precision, \
  {substring_index(\
    ";",\
    sync_precision + time_precision + placement_precision + placement_precision\
  )}\
)}

waitwhile(time.scale() == 0.0 || {timer_get} % timer > threshold || {timer_get} < timer)
useinstant(active.index(spell_name))
useposition(active.index(spell_name), vec(placement_x, placement_y))
goto(if(copy_activator, 99, check))

syncronization_needed:
syncronize = s2i({substring(0, sync_precision)}, 0)

copy:
syncronize = syncronize - 1
execute("{package(sync)}")
goto(if(syncronize <= 0, check, copy))

