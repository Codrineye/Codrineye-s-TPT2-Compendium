:name devbiuld Spell Cmp Utils

; Spell Compactor Utility functions

{lua(\
  utils = {}; --[[General Utilities table]]\
  \
  spell_comp = {}; --[[Spell Compactor utils]]\
  \
  spell_debug = {}; --[[Spell Debugging utils]]\
  spell_debug.can_log = false; --[[logging logic]]\
  spell_debug.can_halt = false; --[[halting logic]]\
  spell_debug.halt_limit = 0; --[[ammount of recordings before halt]]\
  spell_debug.can_display = false; --[[display recorded logic]]\
  spell_debug.concat_format = ""; --[[display format between values]]\
  spell_debug.spacer = table.pack("[", "]");\
  spell_debug.chunk = "Chunk Separation\n";\
)}

#spell_debug {lua(return spell_debug.halt())}
; 
#spell_debug.log(level) {lua(\
  spell_debug.can_log = {level};\
)}
; 
#spell_debug.halt_compilation(level) {lua(\
  spell_debug.can_halt = {level};\
)}
#spell_debug.recordings_before_halt(limit) {lua(\
  spell_debug.halt_limit = {limit};\
)}
; 
#spell_debug.display_spells(level) {lua(\
  spell_debug.can_display = {level};\
)}
; 
#spell_debug.display_format(separator) {lua(\
  spell_debug.concat_format = {separator};\
)}

{lua(\
  function utils.pack_assign(pack_target, value, ...)\
    --[[Assign the same value to multiple variables]]\
    local pack_data = table.pack(...);\
    local target = pack_target;\
    for _, append in ipairs(pack_data) do\
      target[append] = value;\
    end\
  end\
  \
  --[[General Utility Functions defined above]]\
  \
  function spell_comp.const(type, name, value)\
    --[[/*\
        * Function to construct and output a :const definition\
        * user must specify const type, const value name and\
        * value assigned to the const variable\
       */]]\
  \
    local const_value = table.pack(value); --[[variable of type table]]\
    if type == "string" then\
      const_value = table.pack("'", value, "'");\
      --[[Special case if the type is string, value must be encased]]\
    end\
    local const = table.pack(\
      ":const ", type, \
      " ", name, " ", \
      table.concat(const_value)\
    );\
    --[[/*\
        * Construct our constant definition, concat the const_value\
        * to encase the value if we are of type string\
       */]]\
    return table.concat(const);\
  end\
  \
  --[[Spell Compactor Utility Functions defined above]]\
  \
  function spell_debug.log()\
    --[[/*\
        * function handles logging logic\
        * Uses sub-functions for improved readability\
        * \
        * logging is performed through print() to not stop compilation\
       */]]\
    local active = spell.active; --[[access to spell data]]\
    local logged_values = table.pack(\
      "name", "name_size", "name_size_size", \
      "sync", "pointer_mult",\
      "timer", "timer_size", "timer_size_size", \
      "coord_x", "size_x", "size_x_size",\
      "coord_y", "size_y", "size_y_size"\
    );--[[list of all values that can be logged]]\
    \
    --[[/*\
        * How to log these values\
        * Group by type:\
        * name is the spells name\
        * sync an pointer_mult are 1 character signs\
        * Timer, Coord_X and Coord_Y are float\
       */]]\
  end\
  \
  function spell_debug.halt()\
    --[[function handles halting logic]]\
    local debug = spell_debug;\
    local debug_check = false; --[[assumed false for `or` operation]]\
    local debug_values = table.pack("can_halt", "can_display");\
    for _, append in ipairs(debug_values) do\
      debug_check = debug_check or debug[append];\
    end\
    if not debug_check then\
      return; --[[Debugging disabled]]\
    end\
    local debug_text = table.pack(\
      "Compilation stopped, debug mode enabled\n", \
      "Output has been modified by a spell_debug macro"\
    );\
    if debug.halt_limit > 0 and debug.can_halt then\
      --[[concat contents so text previously added isn't lost]]\
      debug_text = table.pack(\
        table.concat(debug_text), "\n",\
        "Logging enabled, logs are visible in your ",\
        "browsers developer console"\
      );\
    end\
    if debug.can_display then\
      debug_text = table.pack(\
        table.concat(debug_text), "\n",\
        "Output formatting enabled\n",\
        "Every component of the output will begin with ",\
        "the string inputed in spell_debug.display_format\n",\
        "Retrieving output showing ", #spell.active, " recording"\
      );\
      debug_text = table.concat(debug_text);\
      if #spell.active > 1 then\
        debug_text = debug_text .. 's'\
        --[[turn recording into recordings if more than 1 spells]]\
      end\
      debug_text = table.pack(debug_text, spell.concat_actives());\
    end\
    return table.concat(debug_text);\
  end\
  \
  --[[Spell Debugging Utility Functions defined above]]\
)}
