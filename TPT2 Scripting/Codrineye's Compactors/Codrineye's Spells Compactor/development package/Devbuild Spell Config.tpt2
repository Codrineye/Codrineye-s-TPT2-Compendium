:import Devbuild Spell Compactor
:name devbuild Spell Config
; 
; Welcome to the configuration
; This script has macros that allow you to
; communicate with the compactor and its debugger
; 
; The following macros let you communicate
; with the debugger
; You can freely change the values you
; give the macros, if you're curious as
; to what each debug macro effects
; 
; spell_debug.log permits logging to
; the browser developer console
; 
; 
; What does it mean for the compactor to halt?
; When the compactor halts, it means that 
; adding a spell will no longer be stored
; 
; Halting is useful when debugging, as you can see
; what the program "sees" at that time
; 
; spell_debug.halt_compilation signals to the
; compactor that compilation should halt eventually
; 
; spell_debug.recordings_before_halt is the amount
; of spells you can add before compilation halts
; this value has no effect if spell_debug.halt_compilation
; is set to 0
; 
; spell_debug.display_spells tells the debugger
; to display the spells you added
; 
; spell_debug.display_spacers_as_numbers tells
; the debugger to convert all spacing sequences
; as the number of spaces, instead of the
; spacing sequence itself
; 
; essentially, it converts [...] to [3]
; This improves readability when
; displaying spells
; 
; spell_debug.display_spells_in_batch signals the
; compactor to display your spells, but to only add
; a `display_format` at the start of a new batch 
; 
; spell_debug.display_format is a string that
; acts as a separtor for inputs
; the string you input in this field will be
; at the beginning of every recorded field
; this only applies if you want to display the output
; 

{spell_debug.log(0)}
{spell_debug.halt_compilation(0)}
{spell_debug.recordings_before_halt(2)}
{spell_debug.display_spells(0)}
{spell_debug.display_spacers_as_numbers(0)}
{spell_debug.display_spells_in_batch(0)}
{spell_debug.display_format('\n|')}

; 
; Time for the actual recording
; you have 4 functions at your disposal
; 
; add_spell.instant()
; this takes in 2 parameters 
; * the name of the spell, this can be obtained by
;   simply importing a script that uses all the modules you want
; * the timer for the spell, being the amount of time you want
;   to pass before activation
; 
; add_spell.grounded()
; this takes in 4 parameters
; * the name, just like in add_spell.instant()
; * the timer, just like in add_spell.instant()
; * the x position of where you want to cast the spell
; * the y position of where you want to cast the spell
; 
; blueprint AI's usually use winemast for the timer `t`
; the timer is the value of `t` at the time of activation
; 
; synchronize()
; this takes in 2 parameters
; * the number of modules you want to activate at once
; * a potential delay you may want to add to the spell timers
; 
; add_batch()
; this takes in 1 parameter
; * the name you want to give this batch
; 
; a batch reprezents a separation in the recording
; this is done when you have multiple activation sequences
; that you want to have in the same actives string
; 
; The batch name is used to determine
; when a batch starts
; 
; 
; If you have a grounded module with coordinates 0,0
; I do not recommend defining it as an instant module
; 
; Even tho your input will be correctly processed
; you will likely have to change things at some point
; and this definition can lead to confusion
; 
; You should not define an instant module as grounded
; for the same reason, make the sequence easier for you
; to follow
; 

{synchronize(2, 0.0)}
{add_spell.instant(barrier.temporal, 0.0)}
{add_spell.instant(spell.floof, 0.0)}

{synchronize(2, 0.0)}
{add_spell.instant(spell.response.neutral, 0.0)}
{add_spell.grounded(spell.void, 0.0, 0.0, 0.0)}

{add_spell.grounded(spell.something, 0.5, 12.0, 10.0)}

{synchronize(4, 0.0)}
{add_spell.instant(spell.snapOfDestiny, 1.0)}
{add_spell.instant(spell.recharge, 1.0)}
{add_spell.instant(spell.cooling, 1.0)}
{add_spell.grounded(spell.something, 1.0, 5.0, 15.0)}

{synchronize(2, 0.0)}
{add_spell.instant(spell.response.neutral, 2.0)}
{add_spell.grounded(spell.void, 2.0, 0.0, 0.0)}

{add_spell.instant(spell.snapOfDestiny, 3.0)}

{synchronize(6, 0.0)}
{add_spell.instant(spell.snapOfDestiny, 28.0)}
{add_spell.instant(spell.refresh, 28.0)}
{add_spell.instant(spell.recharge, 28.0)}
{add_spell.instant(barrier.temporal, 28.0)}
{add_spell.instant(spell.floof, 28.0)}
{add_spell.instant(spell.snapOfDestiny, 28.0)}

{synchronize(2, 0.0)}
{add_spell.instant(spell.cooling, 29.0)}
{add_spell.instant(spell.recharge, 29.0)}

{add_spell.grounded(spell.void, 29.0, 0.0, 0.0)}

{add_spell.grounded(spell.something, 30.5, 12.0, 10.0)}

{synchronize(5, 0.0)}
{add_spell.instant(spell.snapOfDestiny, 31.0)}
{add_spell.instant(spell.recharge, 31.0)}
{add_spell.instant(spell.refresh, 31.0)}
{add_spell.instant(barrier.temporal, 31.0)}
{add_spell.grounded(spell.something, 31.0, 5.0, 15.0)}

{add_spell.instant(spell.snapOfDestiny, 33.0)}

{add_spell.instant(spell.snapOfDestiny, 57.0)}

; 
; This marks the end of spell configuration
; we now have a macro spell_debug
; this is in charge of outputing debugging data
; and prevents the output string from being read
; when its contents are modified for displaying
; 

{spell_debug}

; 
; These are the constants you'll be dealing with
; It's more convenient to put them at the end of this file
; rather than copy them
; Putting the const declaration here is
; also beneficial since it shows you can
; create separate sequences if need be
; Such as for a fragment AI
; 

:const string actives '{lua(return spell.concat_actives())}'
:const string text_end_character '{lua(return spell.text.text_ending_character)}'
:const int spells_count {lua(return #spell.active)}
:const int spell_size {lua(return spell.active_max_length)}

:const int sync_precision {lua(return spell.precision.sync)}
:const int time_precision {lua(return 2 + spell.precision.timer)}
:const int placement_precision {lua(return 2 + spell.precision.placement)}

