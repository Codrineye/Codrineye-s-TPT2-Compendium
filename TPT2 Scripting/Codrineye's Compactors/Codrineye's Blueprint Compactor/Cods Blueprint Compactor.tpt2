
{lua(\
  BP = {};\
  \
  --[[Table holding information needed for debugging]]\
  BP.debug = {};\
  BP.debug.can_log = false;\
  BP.debug.can_halt = false;\
  BP.debug.halt_limit = 0;\
  BP.debug.can_display = false;\
  BP.debug.concat_format = "";\
  \
  --[[Table keeping track of how much space we're using up]]\
  BP.used_space = {};\
  BP.used_space.secure = 0;\
  BP.used_space.blueprint = 0;\
  \
  --[[Keep track of how many modules we have left to synchronize]]\
  BP.sync_ammount = 0;\
  \
  --[[Table that has compactor specific data]]\
  BP.comp = {};\
  \
  --[[Store the software security levels]]\
  BP.comp.software = {};\
  --[[Store the era elements priority order]]\
  BP.comp.era = {};\
  \
  --[[Store the modules we want to secure]]\
  BP.comp.module = {};\
  BP.comp.secure = {};\
  \
  --[[Blueprint activation]]\
  BP.comp.spell = {};\
  BP.comp.blueprint = {};\
)}

; macros for communicating with the compactors debugging system
#spell_debug {lua(BP.debug.halt())}
#spell_debug.add_breakpoint {lua(\
  BP.debug.can_display = true;\
  BP.debug.halt();\
)}

#spell_debug.log(level) {lua(BP.debug.can_log = {level})}
#spell_debug.can_halt(level) {lua(\
  BP.debug.can_halt = {level};\
)}

#spell_debug.recordings_before_halt(limit) {lua(\
  BP.debug.halt_limit = {limit};\
)}
#spell_debug.display_spells(level) {lua(\
  BP.debug.can_display = {level};\
)}
#spell_debug.display_format(format) {lua(\
  BP.debug.concat_format = {format};\
)}

{lua(\
  --[[Internal method to terminate the program for debugging]]\
  local bp_debug_stop = false;\
  \
  --[[/*\
      * Empty table that replaces the need\
      * for repetitive assert sequences\
      * \
      * Adding to a table and concatenating it is more efficient\
      * than ordinairy string concatenation\
     */]]\
  local err_msg = {};\
  \
  --[[Function to more easily handle error messages]]\
  function BP.debug.detect_error()\
    --[[Check if there's an error message to send]]\
    if err_msg[1] ~= nil then\
      error(table.concat(err_msg, 0));\
      --[[/*\
          * If there is send just the message,\
          * the 0 ignores the call context since this context is\
          * just illegible lua code\
         */]]\
    end\
  end\
  \
  --[[/*\
      * WaterCat implementation\
      * Set a list of software names and then\
      * a security level to each software.\
      * \
      * If the security level decided by the user\
      * is smaller or = to the level given to the software\
      * that software gets toggled on, othwerise, it's off\
     */]]\
  \
  --[[list of all the software]]\
  local software_list = table.pack("autoskip", "wavestreaming", \
    "wavesurge", "criticalWavejump", "wavemomentum",\
    "wavestorm", "wavepersistence", "waveinstability",\
    "wavevortex", "wavecatalyst", "waveendurance",\
    "newbounds", "wavemarathon", "wavecompression",\
    "erasurge", "eraburst", "eraswirl", "wavehorizon",\
    "nobounds", "eratunneling", "wavebreach", "wavefloor",\
    "erafloor", "erahorizon", "waverestart", "infinityhorizon"\
  );\
  for _, soft in ipairs(software_list) do\
    BP.comp.software[soft] = -50;\
  end\
  \
  function BP.comp.add_software(software, level)\
    --[[get direct access to the software we recognize]]\
    local soft = BP.comp.software;\
    \
    --[[get the security level from the macro call]]\
    local sec = level:match([[%b""]]):sub(2, -2):gsub(" ", "");\
    \
    if soft[software] == nil then\
      err_msg = table.pack(\
        "Attempt to assign a security level to ",\
        "an unrecognized software\n",\
        "If this is a new software, an update to the compactor ",\
        "should be released soon"\
      );\
    elseif soft[software] ~= -50 then\
      --[[/*\
          * Smallest security level I've seen is -1, \
          * so -50 should never be assigned naturally\
         */]]\
      err_msg = table.pack(\
        "Trying to assign a security level to an ",\
        "already set software"\
      );\
    elseif tonumber(sec) == nil then\
      err_msg[1] = "Trying to assing a non-numeric security level";\
    elseif math.type(tonumber(sec)) ~= "integer" then\
      err_msg[1] = "Trying to assign a non-integer security level";\
    end\
    \
    --[[Detect if we have an error and send it if we do]]\
    BP.debug.detect_error();\
    \
    --[[create the software ID]]\
    local software_name = string.format("software.%s", software);\
    \
    --[[/*\
        * get the extra space we need to fill out\
        * such that the string in sec has as many characters\
        * as the software ID does\
       */]]\
    local lvl = string.format("%%-%ss", #software_name);\
    BP.comp.software[software] = lvl:format(sec);\
  end\
  \
  function BP.comp.concat_software(concat_mode)\
    local modes = {};\
    modes.software_list = true;\
    modes.software_secure = true;\
    modes.software_len = true;\
    \
    if not modes[concat_mode] then\
      err_msg = table.pack(\
        "Invalid concat_mode.\n",\
        "If you're seeing this:\n",\
        "- You're either a user that messed with something ",\
        "you shouldn't have\n",\
        "- Or you're a user that did nothing wrong and ",\
        "I messed something up and didn't propperly bug test"\
      );\
    end\
    BP.debug.detect_error();\
    \
    local software = {};\
    local software_len = 0;\
    \
    for _, soft in ipairs(software_list) do\
      local concat_val = {};\
      if concat_mode == [[software_len]] then\
        software_len = software_len + 9 + #soft;\
      else\
        if concat_mode == [[software_list]] then\
          concat_val[1] = "software.";\
          concat_val[2] = soft;\
        else\
          concat_val[1] = BP.comp.software[soft];\
        end\
        software[1 + #software] = table.concat(concat_val);\
        software[1 + #software] = "|"\
      end\
    end\
    if software_len > 0 then\
      return software_len - 5;\
    end\
    return string.format([["%s"]], table.concat(software));\
  end\
  \
  --[[/*\
      * Easy Era cat\
      * Set a priority level for all the era elements\
      * you want to disable.\
      * Create a ternary string that makes sure the\
      * element of priority 1 gets disabled before priority 2\
      * and so on...\
      * Create an arithmetic.double that checks if the sum\
      * of disabling all those elements is == -#BP.comp.era\
     */]]\
  \
  function BP.comp.set_priority(element_name)\
    local elems = BP.comp.era;\
    local name = tostring(element_name);\
    --[[don't overwrite the priority level of elements]]\
    if elems[name] then return; end\
    \
    elems[1 + #elems] = string.format([["%s"]], name);\
    elems[name] = #elems;\
  end\
  \
  function BP.comp.disable_era()\
    assert(\
      BP.comp.era[1], \
      "Cannot call disable.era without using set_priority macro first"\
    );\
    local elems = BP.comp.era;\
    local era = table.pack(elems[#elems]);\
    for i = #elems - 1, 1, -1 do\
      era = table.pack("if(", \
        "disable.cost(", elems[i], ") != -1.0, ",\
        elems[i], ", ",\
        table.concat(era),\
      ")");\
    end\
    return table.concat(era);\
  end\
  \
  function BP.comp.era_to_disable()\
    local elems = BP.comp.era;\
    local negative_elems = 0.0 - #elems;\
    local era = table.pack("disable.cost(", elems[#elems], ")");\
    for i = #elems - 1, 1, -1 do\
      era = table.pack(\
        "disable.cost(", elems[i], ")",\
        " + ",\
        table.concat(era)\
      );\
    end\
    era = table.pack(negative_elems, " != ", table.concat(era));\
    return table.concat(era);\
  end\
  \
  function BP.comp.recorded_secures(blueprint_name)\
    if #BP.comp.module == 0 then\
      --[[Check if there are any modules to secure]]\
      err_msg = table.pack(\
        "Cannot define a recorded security sequence if you haven't ",\
        "added modules to secure"\
      );\
    end\
    BP.debug.detect_error();\
    \
    local space = BP.used_space.secure;\
    BP.comp.secure[blueprint_name] = space;\
    --[[give the user access to the updated data]]\
    \
    local const = table.pack(\
      ":const int secures_",\
      blueprint_name, " ", space\
    );\
    return table.concat(const);\
  end\
  \
  function BP.comp.add_secure(module_name)\
    local secures_idx = 1 + #BP.comp.module;\
    local secure_name = table.pack(module_name:gsub(" ", ""), "|");\
    \
    BP.comp.module[secures_idx] = table.concat(secure_name);\
    local space = #table.concat(secure_name);\
    BP.used_space.secure = space + BP.used_space.secure;\
    \
    local const = table.pack(\
      ":const in secure_module.",\
      secures_idx, " ", BP.used_space.secure\
    );\
    return table.concat(const);\
  end\
  \
  function BP.comp.recorded_blueprint(name, loopable)\
    --[[/*\
        * This function is used to mark the end\
        * of a blueprint recording to start making another recording\
        * \
        * It returns a const int that holds how much space you used up\
        * so that you can take a substring of the compacted string\
        * more easily\
        * \
        * blueprint_name is used to create the const int name\
        * loopable_blueprint determines if this is a blueprint sequence\
        * that gets looped or not\
       */]]\
    if loopable then\
      local spell_index = #BP.comp.spell;\
      BP.comp.spell[spell_index].loop_sign = "#";\
      --[[/*\
          * Changes the loop sign to `#` so that\
          * the compactor knows to loop\
         */]]\
    end\
    \
    local space = BP.used_space.blueprint;\
    --[[Get the ammount of space we've currently used up]]\
    \
    local bp_name = name:match([[%b""]]):sub(2, -2);\
    --[[removes the quote marks from the match operation]]\
    \
    BP.comp.blueprint[bp_name] = space;\
    --[[/*\
        * add an instance to the table so that this value\
        * can be accessed in lua\
       */]]\
    \
    local const = table.pack(\
      ":const int blueprint_",\
      bp_name, " ", space\
    );\
    return table.concat(const);\
  end\
  \
  function BP.comp.blueprint_base(defined_base)\
    --[[/*\
        * Defines the base at which a loopable blueprint\
        * uses the timer. This is used to calculate `tm` such that\
        * the active timer is compared to tm, which makes\
        * spell activation more precise\
       */]]\
    local spell = BP.comp.spell[#BP.comp.spell];\
    if spell == nil then\
      err_msg[1] = table.pack("Trying to add a timer_base", \
        "without any recorded spells");\
    elseif tonumber(defined_base) == nil then\
      err_msg[1] = "Trying to define a timer_base as a non number";\
    elseif math.type(tonumber(defined_base)) ~= "float" then\
      err_msg[1] = "Trying to define a timer_base as a non double";\
    end\
    BP.debug.detect_error()\
    \
    local base_val = tonumber(defined_base);\
    local base_fmt = table.pack(base_val, "|");\
    spell.timer_base = table.concat(base_fmt);\
    \
    local space = tonumber(spell.space:sub(1, -2));\
    BP.used_space.blueprint = BP.used_space.blueprint - space;\
    --[[We also have to update the total ammount of space being used]]\
    \
    space = space + #spell.timer_base - 1 - #spell.space;\
    --[[/*\
        * Since spell.timer_base originally had a value of `|`\
        * space already includes this 1 character. To get an\
        * accurate reading, we must subtract this 1.\
       */]]\
    \
    local used_space = space;\
    local prev_space = -1;\
    while used_space ~= prev_space do\
      prev_space = used_space;\
      local value = table.pack(used_space, "|");\
      spell.space = table.concat(value);\
      used_space = space + #spell.space;\
      --[[We loop until we're not adding any extra space]]\
    end\
    --[[And we can end by adding the new used space to the total]]\
    BP.used_space.blueprint = BP.used_space.blueprint + used_space;\
  end\
  \
  function BP.comp.sync(spell_ammount)\
    --[[Perform basic error handling on the parameter]]\
    if tonumber(spell_ammount) == nil then\
      err_msg[1] = "Trying to add a non-number as a sync ammount";\
    elseif tonumber(spell_ammount) <= 0 then\
      err_msg[1] = "Trying to add a sync ammount that's less than 1";\
    end\
    BP.debug.detect_error();\
    --[[/*\
        * The sync system prevents the compactor from refreshing its\
        * execution budget until all synchronized modules have been used\
        * \
        * We subtract the ammount of spells that are synchronized by 1\
        * so that the final synchronized spell refreshes the budget\
       */]]\
    BP.sync_ammount = tonumber(spell_ammount) - 1;\
    --[[sync_ammount always gets overwritten]]\
  end\
  \
  function BP.comp.add_spell(name, timer, coord_x, coord_y)\
    --[[Function that records a spell]]\
    \
    local halt_limit = BP.debug.halt_limit == 0 and BP.debug.can_halt;\
    --[[/*\
        * Check if we should halt the program\
        * \
        * We halt if our "halt limit" has been reached\
        * or if our spell_debug_stop flag has been set to true\
       */]]\
    if halt_limit or bp_debug_stop then BP.debug.halt() end\
    \
    local active_name = name:match([[%b""]]):sub(2, -2);\
    if active_name == "" then\
      error("Trying to add a spell with an empty ID", 0);\
    end\
    local actives_index = 1 + #BP.comp.spell;\
    local new_spell = {};\
    \
    new_spell.loop_sign = "/";\
    --[[/*\
        * loop sign is by default "/" to show that nothing happens\
        * aka, our pointer is increased by 2 + space.\
        * \
        * When loop_sign is "#", our pointer is reset to 0\
        * so that we loop the activation sequence\
       */]]\
    new_spell.sync = "/";\
    new_spell.timer_base = "|";\
    local used_space = 3;\
    --[[/*\
        * Recordings take up space, we keep track\
        * of how much space has been used with used_space\
        * used_space is currently 3 because sync and loop_sign\
        * are length-1 signals and the timer_base is empty by default\
       */]]\
    if BP.sync_ammount > 0 then\
      new_spell.sync = "s";\
      BP.sync_ammount = BP.sync_ammount - 1;\
    end\
    --[["s" means that the script skips refreshing the execution budget]]\
    \
    local parameters = table.pack(timer, coord_x, coord_y);\
    local spell_values = table.pack("timer", "coord_x", "coord_y");\
    \
    for i, variable in ipairs(spell_values) do\
      local value = tonumber(parameters[i]);\
      if value == nil then\
        err_msg = table.pack("Trying to add a non-number ", variable);\
      elseif math.type(value) ~= "float" then\
        err_msg = table.pack("Trying to add a non-double ", variable);\
      end\
      BP.debug.detect_error();\
      \
      new_spell[variable] = value;\
    end\
    new_spell.name = active_name\
    spell_values[4] = "name";\
    \
    for _, variable in ipairs(spell_values) do\
      local value = table.pack(new_spell[variable], "|");\
      new_spell[variable] = table.concat(value);\
      used_space = used_space + #new_spell[variable];\
      --[[/*\
          * We use spell_fmt to include the ending character\
          * This ending character is used in an editor index()\
          * in order to isolate the value we need\
         */]]\
    end\
    \
    local internal_space = used_space;\
    local prev = -1\
    while prev ~= used_space do\
      prev = used_space;\
      local value = table.pack(used_space, "|");\
      new_spell.space = table.concat(value);\
      used_space = internal_space + #new_spell.space;\
    end\
    --[[Add the extra space taken up by our space size marker]]\
    \
    BP.comp.spell[actives_index] = new_spell;\
    BP.used_space.blueprint = BP.used_space.blueprint + used_space;\
    \
    \
    --[[Check if we have to log the added data]]\
    local logging_check = BP.debug.can_halt or BP.debug.can_log;\
    if logging_check then BP.debug.log() end\
    \
    --[[If we can halt, decrement our halting limit by 1]]\
    if BP.debug.can_halt then\
      BP.debug.halt_limit = BP.debug.halt_limit - 1;\
    end\
    \
    local const = table.pack(\
      ":const int spell_", \
      actives_index, " ", BP.used_space.blueprint\
    );\
    return table.concat(const);\
    --[[/*\
        * Return a const int that has\
        * the ammount of space it took to add this spell\
       */]]\
  end\
  \
  function BP.comp.concat_actives()\
    local actives = {};\
    \
    local spells = BP.comp.spell;\
    --[[table holding the compacted data]]\
    local spells_count = #spells;\
    --[[number of spells recorded]]\
    \
    local concat_debug = {};\
    if BP.debug.can_display then\
      local fmt = BP.debug.concat_format;\
      concat_debug.format = fmt;\
      concat_debug.separation = " ";\
      concat_debug.bit_format = fmt .. "Bit signal %s = '%s'";\
      concat_debug.spell_data = fmt .. "%s %s size %s";\
    else\
      concat_debug.format = "";\
      concat_debug.separation = "";\
      concat_debug.bit_format = "%s";\
      concat_debug.spell_data = "%s";\
    end\
    concat_debug.chunk_end = "End of recording %s";\
    \
    for i = 1, spells_count do\
      --[[/*\
          * spell data is compacted in the order\
          * \
          * loop_sign\
          * sync signal\
          * timer_base\
          * space\
          * timer\
          * coord_x coord_y\
          * name\
         */]]\
      local data = spells[i];\
      local data_pack = {};\
      local data_names = table.pack(\
        "loop_bit", "sync_bit",\
        "base", "space", "timer",\
        "coord_x", "coord_y",\
        "name"\
      );\
      local data_set = {};\
      local idx = 1;\
      if BP.debug.can_display then\
        --[[Sets the data_set for the case where we can display]]\
        data_set = table.pack("loop_sign", "sync");\
        for _, set in ipairs(data_set) do\
          local name = data_names[idx];\
          data_pack[name] = table.pack(\
            name:gsub("_bit", ""),\
            --[[removes the _bit from the name]]\
            data[set]\
          );\
          idx = idx + 1;\
        end\
        data_pack.chunk_end = concat_debug.chunk_end:format(i);\
        \
        data_set = table.pack(\
          "timer_base", "space", "timer",\
          "coord_x", "coord_y",\
          "name"\
        );\
      else\
        --[[Sets the data_set for the case where we can't display]]\
        data_pack.chunk_end = "";\
        data_set = table.pack(\
          "loop_sign", "sync",\
          "timer_base", "space", "timer",\
          "coord_x", "coord_y",\
          "name"\
        );\
      end\
      for _, set in ipairs(data_set) do\
        local name = data_names[idx];\
        data_pack[name] = table.pack(\
          data[set], set, \
          #data[set]\
        );\
        idx = idx + 1;\
      end\
      \
      actives[1 + #actives] = concat_debug.format;\
      for _, name in ipairs(data_names) do\
        local spell_data = data_pack[name];\
        local fmt = "";\
        --[[Determine the format we're using]]\
        if name:match("_bit") == "_bit" then\
          fmt = concat_debug.bit_format;\
        else\
          fmt = concat_debug.spell_data;\
        end\
        actives[1 + #actives] = fmt:format(table.unpack(spell_data));\
      end\
      actives[1 + #actives] = concat_debug.format;\
      actives[1 + #actives] = data_pack.chunk_end;\
    end\
    \
    local str_fmt = [["%s"]]\
    return str_fmt:format(table.concat(actives));\
  end\
  \
  \
  function BP.debug.log()\
    --[[/*\
        * Function handles logging logic.\
        * It can only be called from BP.comp.add_spell\
        * \
        * logging is performed through print() to not stop compilation\
       */]]\
    local spell_index = #BP.comp.spell;\
    local spell = BP.comp.spell[spell_index];\
    local logging_text = table.pack(\
      "%s| BP has %s: '%s'\n"\
    ); --[[/*\
           * list of the logging messages\
           * There were more messages here, but they've been\
           * removed.\
           * \
           * I'm keeping it a table just in case I need\
           * to add more messages\
          */]]\
    local logging_values = table.pack(\
      "name",\
      "sync", "loop_sign",\
      "timer", "timer_base",\
      "coord_x", "coord_y", "space"\
    ); --[[/*\
        * List of values that get logged\
        * in the same order they're listed here\
       */]]\
    \
    local values_index_for_space = 8;\
    --[[Indicates what value means we're logging space]]\
    \
    local text = "| Logging spell number %s:\n|\n";\
    local log = text:format(spell_index);\
    --[[/*\
        * Our log is built within the string `log`;\
        * The string `text` is the text we're adding to the log\
        * and then we use string.format(text, log, other values)\
        * which is truncated to text:format(log, other values);\
       */]]\
    for i, value in ipairs(logging_values) do\
      text = logging_text[1];\
      local spell_value = spell[value];\
      if spell_value == nil then\
        err_msg = "Cannot log nil value " .. value;\
        error(err_msg);\
      end\
      local fmt = table.pack(log, value, spell_value);\
      if i == values_index_for_space then\
        text = "%s| Summing up to a total space of %s\n"\
        fmt = table.pack(log, spell_value);\
      end\
      log = text:format(table.unpack(fmt));\
    end\
    print(log);\
    --[[And finally, we print our formatted log]]\
  end\
  \
  function BP.debug.halt()\
    --[[/*\
        * Function handles halting logic.\
        * It's access points are \
        * * BP.comp.add_spell\
        * * BP Config\
        * \
        * halting is performed through error() to stop compilation\
       */]]\
    local should_halt = BP.debug.can_halt or BP.debug.can_display;\
    if not should_halt then return end\
    --[[We return if we shouldn't halt]]\
    \
    local halt_text = table.pack(\
      "\n", \
      "Compilation stopped, debug mode enabled\n", \
      "Output has been modified by a spell_debug macro"\
    );\
    if BP.debug.can_log then\
      local halt_logging = table.pack(\
        "\n", \
        "Logging enabled, logs are visible ",\
        "in your browsers developer console"\
      );\
      for _, text in ipairs(halt_logging) do\
        halt_text[1 + #halt_text] = text;\
      end\
    end\
    if BP.debug.can_display then\
      local halt_display = table.pack(\
        "\n", \
        "Output formatting enabled\n", \
        "Every component of the output will begin ",\
        "with the string inputed in ",\
        "spell_debug.display_format\n", \
        "Retrieving output showing ",\
        #BP.comp.spell,\
        " "\
      );\
      if #BP.comp.spell == 1 then\
        halt_display[9] = "recording";\
      else\
        halt_display[9] = "recordings";\
      end\
      halt_display[10] = BP.comp.concat_actives();\
      for _, text in ipairs(halt_display) do\
        halt_text[1 + #halt_text] = text;\
      end\
    end\
    error(table.concat(halt_text), 0);\
  end\
)}

; 
; Helper macros to make the user interact with the
; compactor in an easier manner
; Separated in "chapters"
; 

; The Spell Compactor
; 
; Returns a const int with the value of the current space occupied
#recorded_blueprint(name, can_loop) {lua(\
  return BP.comp.recorded_blueprint([["{name}"]], {can_loop});\
)}
; 
; Define a base for the timer
#timer_modulo(modulo) {lua(BP.comp.blueprint_base([[{modulo}]]))}
; 
; Synchronize spell_count ammount of spell activations
#synchronize(spell_count) {lua(BP.comp.sync({spell_count}))}
; 
; general add_spell lua function call
#add_spell(name, timer, coord_x, coord_y) {lua(\
  return BP.comp.add_spell(\
    [[{name}]],\
    [[{timer}]],\
    {coord_x},\
    {coord_y}\
  );\
)}

; Adds a useinstant() spell
#add_spell.instant(name, timer) {add_spell(\
  "{name}",\
  {timer}, \
  0.0, \
  0.0\
)}

; Adds a useposition() spell
#add_spell.grounded(name, timer, coord_x, coord_y) {add_spell(\
  "{name}",\
  {timer},\
  {coord_x},\
  {coord_y}\
)}
; Concatenates the actives and returns the total recording space
#recorded_actives {lua(return BP.comp.concat_actives())}
#recording_size {lua(return BP.used_space.blueprint)}

; Secure Compactor
; Defines a security sequence
#recorded_security(secure_name) {lua(\
  return BP.comp.recorded_secures([[{secure_name}]])\
)}
; Defines a module to secure
#add_secure(secure_name) {lua(BP.comp.add_secure([[{secure_name}]]))}
; 
; Concatenates the secures and returns the total recording space
#recorded_secures "{lua(return table.concat(BP.comp.module))}"
#secures_space {lua(return BP.used_space.secure)}

; EasyEra cat
; Assigns a priority to an element
#set_priority(element) {lua(\
  return BP.comp.set_priority([[{element}]])\
)}
; Returns a ternary: string to that's placed in disable.era
#disable.era {lua(return BP.comp.disable_era())}
; Returns a bool to know if all elements we wanted to disable
; got disabled
#disable_era {lua(return BP.comp.era_to_disable())}
; 
; Watercat
; Reset the watercat index
#watercat_index_reset watercat = 0
; 
; Generalized substring used in watercat
#watercat_sub(list) sub(\
  {list}, \
  watercat, \
  index({list}, "|", watercat) - watercat\
)
; Line 1 that toggles the software
#watercat_line1(secure_level) software_toggle_loop:\
software.toggle(\
  {watercat_sub(software_list)},\
  {secure_level} <= s2i({watercat_sub(software_secure)}, -1)\
)
; line 2 that increments watercat
#watercat_line2 watercat = 1 + index(software_list, "|", watercat)
; line 3 that creates a while loops
#watercat_line3 gotoif(software_toggle_loop, watercat < software_len)
; 
; Concat the software levels
#software.concat(concat_mode) {lua(\
  return BP.comp.concat_software([[{concat_mode}]])\
)}

; Centralized securing lua macro call so that there's only
; 1 macro to edit
#software.secure(software_name, level) {lua(\
  BP.comp.add_software([[{software_name}]], [["{level}"]])\
)}

#auto_skip(level) {software.secure(autoskip, {level})}
#wave_streaming(level) {software.secure(wavestreaming, {level})}
#wave_surge(level) {software.secure(wavesurge, {level})}
#critical_wave_jump(level) {software.secure(criticalWavejump, {level})}
#wave_momentum(level) {software.secure(wavemomentum, {level})}
#wave_storm(level) {software.secure(wavestorm, {level})}
#wave_persistence(level) {software.secure(wavepersistence, {level})}
#wave_instability(level) {software.secure(waveinstability, {level})}
#wave_vortex(level) {software.secure(wavevortex, {level})}
#wave_catalyst(level) {software.secure(wavecatalyst, {level})}
#wave_endurance(level) {software.secure(waveendurance, {level})}
#new_bounds(level) {software.secure(newbounds, {level})}
#wave_marathon(level) {software.secure(wavemarathon, {level})}
#wave_compression(level) {software.secure(wavecompression, {level})}
#era_surge(level) {software.secure(erasurge, {level})}
#era_burst(level) {software.secure(eraburst, {level})}
#era_swirl(level) {software.secure(eraswirl, {level})}
#wave_horizon(level) {software.secure(wavehorizon, {level})}
#no_bounds(level) {software.secure(nobounds, {level})}
#era_tunneling(level) {software.secure(eratunneling, {level})}
#wave_breach(level) {software.secure(wavebreach, {level})}
#wave_floor(level) {software.secure(wavefloor, {level})}
#era_floor(level) {software.secure(erafloor, {level})}
#era_horizon(level) {software.secure(erahorizon, {level})}
#wave_restart(level) {software.secure(waverestart, {level})}
#infinity_horizon(level) {software.secure(infinityhorizon, {level})}
