:import Blueprint Compactor lib
:name {tower_handler}
:budget_cap max

; detect if the handler is in idle_mode
#idle_mode contains(idle_mode, {caller.get})

execute("{package(Debugger)}")
; To support debugging, you enable the script called "Debugger"
; once it executes, it will stop all instance of the tower handler
; 
gotoif(\
  if({timer.get} == 0.0, start_timer, start_secures), \
  contains(impulse(), "{tower_handler}")\
)
; The handler is in charge of spell activations and module secures
; Because spell activations need a timer, there will always be 1 instance
; running that is in charge of keeping the timer updated
; 
; If we pass the gotoif(), we're in charge of casting spells
; we are not the instance that's keeping the timer as doing so
; would prevent people from using executesync("{tower_handler}")
; 

; We use local variables to prevent a messy interface
; And to let the user have more instances running at once
; 
pointer = {pointer.get}
; Potential offset when executing spells.

checkpoint = {checkpoint.get}
; Point at which we return on looping spells
actives = {comp_active.get}
; Our list of spells to execute

{comp_secure.set({comp_secure.get})}
; makes sure that the secures string is included in the block hider
{caller.set(if(\
  contains(impulse(), ":"), \
  sub(impulse(), 0, index(impulse(), ":", 0)),\
  impulse()\
))}
; We stop the block hider started by {pointer.set()}
; by setting the caller. This is also used so that
; the user knows who accessed the tower hander
; 
; This will typically only have 1 value, but if
; it has a name that you don't expect, it should tell the
; user that there's another script that uses the compactor
; which they might want to shut down

execute("{tower_handler}")
; We now make a copy of ourselves.
; This is how we start securing modules
; If there is no timer yet, this will first
; initialize the timer which starts securing modules

assign_base:
; We try to assign a base to ourselves.
; Since the user could have set the base at any point
; in the recording process it's not enough to try to assign a base
; once the pointer is set to 0
; 
timer_base = {get_base}
; 
; {get_base} returns utcnow() if we didn't find a base.
; Thanks to the budget, the value returned by utcnow()
; will be the same until we let a frame pass
det_timer_base = timer_base != utcnow()

loop:
; We loop for as long as our actives still holds
; at least 1 spell to activate
; 
; If this is a loopable blueprint, we can be in
; the loop when pointer == checkpoint more than once. If we've 
; looped over and have determined the timer base, we must
; wait for our modulo_timer to reset back to 0.0

clock = if(\
  pointer == checkpoint && det_timer_base, \
  1.0 + floor({timer.get} / timer_base), \
  0.0\
)

; Here, we make sure that execution is halted until
; {modulo_timer} is reset to 0.0 or until we enter idle_mode
waituntil({timer.get} >= timer_base * clock || {idle_mode})

; Since the modules clock is used in the waitwhile,
; we calculate the value here to save on processing
clock = {get_timer}

; we lock up the handler until it's time to use a spell
; we stop waiting if we've entered idle mode to safely shut down
waituntil({modulo_timer} >= clock || {idle_mode})

; Prevent activating a spell if we're in idle mode
spell_ID = if({idle_mode}, "", {get_name})

; 
; We use both instant and grounded spells here because we
; don't actually know what spell we're casting, just that we
; have to cast one with the given parameters
useinstant(active.index(spell_ID))
useposition(active.index(spell_ID), {get_pos})

; If we're activating multiple spells through synchronization
; this checks if we skip refreshing the budget (signaled with an `s`)
gotoif(no_frame, contains({get_bits}, "s"))
waitframe()

no_frame:
{pointer.increment}
; We add to our pointer the size of our spell or set it to 0 if
; we must loop over. 

#end_of_compactor -1 == index(actives, "|", pointer)
; if we can't find the separation character `|` in our string at
; offset pointer, we've successfully cleared our activation sequence
; and can safely exit.
; If index can't find the character, it returns -1

goto(if({end_of_compactor}, end_instance, if(\
  health(false) <= 0.0, \
  end,\
  if(det_timer_base, loop, assign_base)\
)))
; We terminate the program if we reach the end of the string
; This doesn't enter idle mode, as it's possible that the user might
; want to send another blueprint over our way. In that case, if we
; did enter idle mode, the timer would stop, de-synchronizing things

start_secures:
:local double i
i = 1.0
secures = {comp_secure.get}
{comp_secure.set("")}
; Clear the secure field to not over-populate the active scripts count.

loop_secures:
disable.inf(sub(secures, pointer, index(secures, "|", pointer) - pointer))
; try to disable the module we're pointing at

; Skip waiting a frame if we have enough xp to secure another module
gotoif(secures_no_frame, disable.inf.cost() <= xp())
waitframe()

secures_no_frame:
; increment our pointer only if we managed to secure a module
pointer = if(\
  disable.inf.cost() > 1000.0 ^ i, \
  1 + index(secures, "|", pointer), \
  pointer\
)
; increment our disable.inf.cost() indicator only if
; our indicator has become out of date
i = if(disable.inf.cost() > 1000.0 ^ i, i + 1.0, i)

goto(if(\
  contains({caller.get}, idle_mode) \
  || index(secures, "|", pointer) == -1, \
  end_instance, \
  loop_secures\
))
; We end the instance if we've secured all the modules we had to
; or if we've entered idle_mode

start_timer:
{timer.set(time.delta())}
execute("{tower_handler}")
; We must create another instance of ourselves
; to start securing modules

timer:
waitframe()
{timer.add(time.delta())}
gotoif(timer, {caller.get} != idle_mode)
; The timer will be incremented until one of these actions are performed
; - call the compactor outside of towertesting
; - stop all instances of the compactor
; - set the caller_ID to the string called idle_mode

end:
{timer.set(0.0)}
; The timer should be reset when the compactor enters idle mode
; This would make it so that the user never actually needs to start
; their script with global.unset(timer_var), but I'm honnestly not sure
; why it doesn't get set to 0.0

idle:
{caller.set(idle_mode)}

end_instance:
