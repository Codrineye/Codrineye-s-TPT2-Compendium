
; 
; This is a library that declairs the naming scheme
; needed to use the spell compactor
; 
#bp_comp BP Comp
#blueprint_package(name) {bp_comp}:{name}
#tower_handler {blueprint_package(Tower Handler)}
; 
#hider.start <size=0>
#hider.close </size>
; 
:const string hider.start "{hider.start}"
:const string hider.close "{hider.close}"
; 
:const string pointer_var "{hider.start}{bp_comp} Pointer"
#pointer.get global.int.get(pointer_var)
#pointer.set(value) global.int.set(pointer_var, {value})
; 
:const string checkpoint_var "{bp_comp} Pointer Checkpoint"
#checkpoint.get global.int.get(checkpoint_var)
#checkpoint.set(value) global.int.set(checkpoint_var, {value})
; 
:const string compactor_actives "{bp_comp} access actives str"
#comp_active.get global.string.get(compactor_actives)
#comp_active.set(str) global.string.set(compactor_actives, {str})
; 
:const string compactor_secures "{bp_comp} access secures str"
#comp_secure.get global.string.get(compactor_secures)
#comp_secure.set(str) global.string.set(compactor_secures, {str})
; 
:const string caller_ID "{hider.close}{bp_comp} caller"
#caller.get global.string.get(caller_ID)
#caller.set(caller_ID) global.string.set(caller_ID, {caller_ID})

#idle_mode_str {hider.start}:{hider.close}
; 
; this is a special string that makes it impossible
; for a caller script to trigger this value.
; 
:const string idle_mode "{idle_mode_str}idle mode"
; This string is used by the compactor to detect if entered idle mode
; 
:const string timer_var "t"
#timer.get global.double.get(timer_var)
#timer.set(value) global.double.set(timer_var, {value})
#timer.add(value) {timer.set(({value}) + {timer.get})}
; 
