:import Secure Config_blueprint AI using the compactor
:import Spell Config_blueprint AI using the compactor
:import Blueprint Compactor resources

; 
; A blueprint AI most of the time
; has a library for convenience
; 
; Here, we import the Spell and Secure Configs you just made
; and the Blueprint Compactor resources
; 
; if you get an error saying
; 'Import failed: Script "Blueprint Compactor resources" does not exist!'
; Please make sure you have Codrineye's Spell Compactor imported
; 

#package(name) example_text:{name}

; 
; this package macro is kept for use in the
; :name function for consistent naming and
; to easily detect if you were called by a
; scrit of your own
; 
; As of game update 0.49.0, you no longer
; need to include the package name when executing
; as it will automaticall execute the script of the
; same name inside of your package
; if none are found, it will try to execute a script
; of that name, that is not included in a package
; 
; My recommendation is that you keep the execute format
; execute("package:name")
; so that it's easier to understand what you're looking at
; when making a source project
; 

#identifier "example_text"

; 
; identifier is a string used when creating
; global variables that ensures your variable
; is unique to your AI
; 
; This identifier should preferably
; be the package name to ensure you're
; the only one who can access it
