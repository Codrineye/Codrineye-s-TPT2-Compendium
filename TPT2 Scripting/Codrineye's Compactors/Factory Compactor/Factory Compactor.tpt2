:import Factory Compactor Debugger

; 
; Factory variable definitions
; 

{lua(\
  factory = {};\
  factory.items = {};\
  factory.item_names = {};\
  factory.item_types = {};\
  factory.categories = {};\
  \
  factory.recipes = {};\
  factory.recipe_list = {};\
  factory.recipe_target = {};\
  \
  factory.max_length = {};\
)}

; 
; Core Program
; 
; Important things to note
; factory.items is the same as factory["items"]
; items has to be string for this operation
; 
; If you define factory but not factory.items
; checking (factory.items == nil) is the same as
; checking (not factory.items)
; 

{lua(\
  function factory.add_item(name, tiers, game_name, game_type)\
    local new_item = {};\
    new_item.id = 1 + #factory.items;\
    new_item.name = name:gsub(" ", "");\
    new_item.game_name = game_name:gsub(" ", "");\
    new_item.game_type = game_type:gsub(" ", "");\
    new_item.tiers = tonumber(tiers);\
    \
      --[[/*\
          * We call our debugging function\
          * if the items tier is invalid\
          * this means if it's nil or\
          * it goes under/over our alowed limit\
          * minimum of 1, because ingame items can't be tier 0\
          * maximum of 10, because ingame items can't surpass tier 10\
         */]]\
    \
    if not new_item.tiers then\
      debug.error.name = "tiers";\
      return debug.print_error();\
    end\
    if 10 < new_item.tiers or new_item.tiers < 1 then\
      debug.error.name = "tiers";\
      debug.error.comp = true;\
      debug.error.comp_min = 1;\
      debug.error.comp_max = 10;\
      return debug.print_error();\
    end\
  \
    factory.items[new_item.id] = new_item;\
    factory.item_names[new_item.name] = new_item.id;\
    factory.item_types[new_item.name] = new_item.game_type;\
    \
      --[[/*\
          * Utility function that makes adding\
          * max_length recordings easier and pretties up\
          * the variable declarations a little\
         */]]\
    \
    local function factory_max_length(name)\
      local max_length = factory.max_length;\
      if not max_length[name] then\
        max_length[name] = 0;\
      end\
      max_length[name] = math.max(max_length[name], #new_item.name);\
    end\
    \
    factory_max_length("item_name");\
    factory_max_length(new_item.game_type);\
    \
     --[[/*\
         * Now that we've recorded a new item,\
         * we can create its instance inside of our recipes list\
         * this is done here so that the item fields aren't \
         * modified outside our recorder\
         * \
         * We start by determening what data to copy from our new_item\
         * and then create 2 lists, just like in the original d0s.factory\
        */]]\
    \
    local new_item_copy = {};\
    new_item_copy[1 + #new_item_copy] = "id";\
    new_item_copy[1 + #new_item_copy] = "name";\
    new_item_copy[1 + #new_item_copy] = "tiers";\
    new_item_copy[1 + #new_item_copy] = "game_name";\
    new_item_copy[1 + #new_item_copy] = "game_type";\
    \
    local recipe_item = {};\
    for i = 1, #new_item_copy do\
      local var = new_item_copy[i];\
      recipe_item[var] = new_item[var];\
    end\
    \
     --[[/*\
         * list 1 is a forward facing list\
         * This list is stored inside of factory.recipe_list\
         * and records what recipes require this item\
        */]]\
    \
    recipe_item.recipe = {};\
    for i = 1, recipe_item.tiers do\
      recipe_item.recipe[i] = {};\
    end\
    factory.recipe_list[recipe_item.name] = recipe_item;\
    \
     --[[/*\
         * list 2 is a reversed list\
         * This list is stored in factory.recipes\
         * and is used to determine what items\
         * are needed to make the item\
        */]]\
    \
    local offset = 10 * recipe_item.id;\
    local internal_tiers = recipe_item.tiers - 1;\
    for i = offset, offset + internal_tiers do\
      factory.recipes[i] = {};\
    end\
    \
    debug.text.const = true;\
    debug.text.type = "int";\
    debug.text.name = new_item.name;\
    debug.text.const_data = tostring(new_item.id);\
    return debug.print_text();\
  end\
  \
 \
  function factory.define_recipe(item_name)\
    \
     --[[/*\
         * Function to declair that we're defining\
         * the recipe of an item with name `item_name`\
         * Throw an error if the item_name doesn't exist\
         * \
         * output a const to prevent multiple definitions\
         * of the same item\
        */]]\
    \
    local recipe_item = factory.recipe_list[item_name];\
    if not recipe_item then\
      debug.error.name = "recipe";\
      debug.error.recipe = true;\
      return debug.print_error();\
    end\
    factory.recipe_target = recipe_item;\
    \
    debug.text.const = true;\
    debug.text.type = "int";\
    debug.text.name = "recipe." .. recipe_item.name;\
    debug.text.const_data = recipe_item.id;\
    return debug.print_text();\
  end\
  function factory.add_component(tiers, name, counts)\
    local recipe_target = factory.recipe_target;\
    if not recipe_target.id then\
      debug.error.name = "recipe component";\
      debug.error.component_recipe = true;\
      return debug.print_error();\
    end\
    local comp_name = name:gsub(" ", "");\
    local component = factory.recipe_list[comp_name];\
    if not component then\
      debug.error.name = "component";\
      return debug.print_error();\
    end\
    if component.game_type == "group" then\
      debug.error.name = "component";\
      debug.error.component_group = true;\
      return debug.print_error();\
    end\
    local temp_tier = {};\
    for input in tiers:gmatch("%S+") do\
      local tier = tonumber(input);\
      if not tier then\
        debug.error.name = "component tier";\
        return debug.print_error();\
      end\
      temp_tier[1 + #temp_tier] = tier;\
    end\
    if #temp_tier ~= 1 or #temp_tier > component.tiers then\
      debug.error.name = "component_tiers";\
      \
    end\
  end\
  function factory.define_produce(name, parent, cost, machine)\
  end\
 \
  \
  function factory.add_category(name, default, first, last)\
    local category = {};\
    \
    category.id = 1 + #factory.categories;\
    local fields = table.pack("default", "first", "last");\
    local args = table.pack(default, first, last);\
    category.name = name:gsub(" ", "");\
    \
    for i = 1, #fields do\
      local trimmed = args[i]:gsub(" ", "");\
      local item = factory.item_names[trimmed];\
      if not item then\
        debug.error.name = "category parameter"\
        debug.error.category = true;\
        debug.error.category_field = trimmed\
        return debug.print_error();\
      end\
      local field = fields[i];\
      category[field] = item;\
    end\
    factory.categories[category.id] = category;\
  end\
)}

; 
; Helper Macros
; 

; 
; Mathod to communicate with the compactor to add an item
; Used by other macros for easier definitions
#add_item(name, tiers, game_name, type) {lua(return factory.add_item(\
  "{name}",\
  {tiers},\
  {game_name},\
  {type}\
))}

; 
; Mathod to add an item that's inside of the craft function
#craft(name, tiers, game_name) {add_item(\
  {name},\
  {tiers},\
  {game_name},\
  "craft"\
)}

; 
; Mathod to add an item that's inside of the produce function
#produce(name, tiers, game_name) {add_item(\
  {name},\
  {tiers},\
  {game_name},\
  "produce"\
)}

; 
; Method to group items together
; this items game_name doesn't exist so
; for ease of understanding, it's marked as
; the items name .group
; 
; in d0s's factory AI, this was ore because of
; a game bug that has since been fixed
#group(name, tiers) {add_item(\
  {name},\
  {tiers},\
  "{name}.group",\
  "group"\
)}

; 
; Mathod to add a *special* item
; special items are for internal use, and do not show on UI
#special(name, tiers, game_name) {add_item(\
  {name},\
  {tiers},\
  {game_name},\
  "special"\
)}

; 
; Method to declair a recipe
#recipe(name) {lua(return factory.define_recipe([[{name}]]))}

; 
; Method to declair a recipe component
; for making an item defined as craft
#component(tiers, name, count) {lua(return factory.add_component(\
  [[{tiers}]],\
  [[{name}]],\
  [[{count}]]\
))}

; 
; Method to declair the requirements of
; making an item defined as produce
#to_produce(item, source, cost, machine) {lua(\
  return factory.define_produce(\
    "{item}",\
    "{source}",\
    {cost},\
    "{machine}"\
  );\
)}

; 
; Method to add a category
#category(name, default, first, last) {lua(return factory.add_category(\
  "{name}",\
  "{default}",\
  "{first}",\
  "{last}"\
))}

