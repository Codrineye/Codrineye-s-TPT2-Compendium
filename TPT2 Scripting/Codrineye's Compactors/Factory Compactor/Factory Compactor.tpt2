:import Factory Compactor Utilities

; 
; Factory variable definitions
; 

{lua(\
  factory = {};\
  factory.items = {};\
  factory.item_names = {};\
  factory.item_types = {};\
  factory.categories = {};\
  \
  factory.recipes = {};\
  factory.recipe_list = {};\
  factory.recipe_target = {};\
  \
  factory.max_length = {};\
)}

; 
; Core Program
; 
; Important things to note
; factory.items is the same as factory["items"]
; items has to be string for this operation
; 
; If you define factory but not factory.items
; checking (factory.items == nil) is the same as
; checking (not factory.items)
; 

{lua(\
  function factory.add_item(name, tiers, game_name, game_type)\
    local new_item = {};\
    new_item.id = 1 + #factory.items;\
    new_item.name = name:gsub(" ", "");\
    new_item.game_name = game_name:gsub(" ", "");\
    new_item.game_type = game_type:gsub(" ", "");\
    new_item.tiers = tonumber(tiers);\
    \
      --[[/*\
          * We call our error function\
          * if the items tier is invalid\
          * this means if it's nil or\
          * it goes under/over our alowed limit\
          * minimum of 1, because ingame items can't be tier 0\
          * maximum of 10, because ingame items can't surpass tier 10\
         */]]\
    \
    if not new_item.tiers then\
      util.error.name = "tiers";\
      return util.print_error();\
    end\
    if 1 > new_item.tiers or new_item.tiers > 10 then\
      util.error.name = "tiers";\
      util.error.compare = true;\
      util.error.compare_min = 1;\
      util.error.compare_max = 10;\
      return util.print_error();\
    end\
  \
    factory.items[new_item.id] = new_item;\
    factory.item_names[new_item.name] = new_item.id;\
    factory.item_types[new_item.name] = new_item.game_type;\
    \
      --[[/*\
          * Utility function that makes adding\
          * max_length recordings easier and pretties up\
          * the variable declarations a little\
         */]]\
    \
    local function factory_max_length(name)\
      local max_length = factory.max_length;\
      if not max_length[name] then\
        max_length[name] = 0;\
      end\
      max_length[name] = math.max(max_length[name], #new_item.name);\
    end\
    \
    factory_max_length("item_name");\
    factory_max_length(new_item.game_type);\
    \
     --[[/*\
         * Now that we've recorded a new item,\
         * we can create its instance inside of our recipes list\
         * this is done here so that the item fields aren't \
         * modified outside our recorder\
         * \
         * We start by determening what data to copy from our new_item\
         * and then, just like in d0s.factory, create 2 lists\
        */]]\
    \
    local new_item_copy = {};\
    new_item_copy[1 + #new_item_copy] = "id";\
    new_item_copy[1 + #new_item_copy] = "name";\
    new_item_copy[1 + #new_item_copy] = "tiers";\
    new_item_copy[1 + #new_item_copy] = "game_name";\
    new_item_copy[1 + #new_item_copy] = "game_type";\
    \
    local recipe_item = {};\
    for i = 1, #new_item_copy do\
      local var = new_item_copy[i];\
      recipe_item[var] = new_item[var];\
    end\
    \
     --[[/*\
         * list 1 is a forward facing list\
         * This list is stored inside of factory.recipe_list\
         * and records what recipes require this item\
        */]]\
    \
    recipe_item.recipe = {};\
    for i = 1, recipe_item.tiers do\
      recipe_item.recipe[i] = {};\
    end\
    factory.recipe_list[recipe_item.name] = recipe_item;\
    \
     --[[/*\
         * list 2 is a reversed list\
         * This list is stored in factory.recipes\
         * and is used to determine what items\
         * are needed to make the item\
        */]]\
    \
    local offset = 10 * recipe_item.id;\
    local internal_tiers = recipe_item.tiers - 1;\
    for i = offset, offset + internal_tiers do\
      factory.recipes[i] = {};\
    end\
    \
    util.text.const = true;\
    util.text.type = "int";\
    util.text.name = new_item.name;\
    util.text.const_data = tostring(new_item.id);\
    return util.print_text();\
  end\
  \
 \
  function factory.define_recipe(item_name)\
    \
     --[[/*\
         * Function to declair that we're defining\
         * the recipe for the item `item_name`\
         * Throw an error if the item_name doesn't exist\
         * \
         * output a const to prevent multiple definitions\
         * of the same item\
        */]]\
    \
    local recipe_item = factory.recipe_list[item_name];\
    if not recipe_item then\
      util.error.name = "recipe";\
      util.error.recipe = true;\
      return util.print_error();\
    end\
    factory.recipe_target = recipe_item;\
    \
    util.text.const = true;\
    util.text.type = "int";\
    util.text.name = "recipe." .. recipe_item.name;\
    util.text.const_data = recipe_item.id;\
    return util.print_text();\
  end\
  \
  function factory.add_component(tiers, name, counts)\
    local recipe_target = factory.recipe_target;\
    if not recipe_target.id then\
      util.error.name = "recipe component";\
      util.error.no_recipe = true;\
      return util.print_error();\
    end\
    local comp_name = name:gsub(" ", "");\
    local component = factory.recipe_list[comp_name];\
    if not component then\
      util.error.name = "component";\
      return util.print_error();\
    end\
    if component.game_type == "group" then\
      util.error.name = "component";\
      util.error.component_is_group = true;\
      return util.print_error();\
    end\
    local temp_tiers = {};\
    for input in tiers:gmatch("%S+") do\
      local tier = tonumber(input);\
      if not tier then\
        util.error.name = "component tier";\
        return util.print_error();\
      end\
      temp_tiers[1 + #temp_tiers] = tier;\
    end\
    if #temp_tiers ~= 1 and #temp_tiers ~= recipe_target.tiers then\
      util.error.name = "component_tiers";\
      util.error.component_mismatch = true;\
      util.error.mismatched_element = "tiers"\
      util.error.target_elements = recipe_target.tiers;\
      util.error.obtained_elements = #temp_tiers;\
      return util.print_error();\
    end\
    local base_tier;\
    for i = 1, recipe_target.tiers do\
      if temp_tiers[i] ~= nil then\
        base_tier = temp_tiers[i];\
      end\
      local tier = base_tier;\
      if tier < 1 then\
        tier = tier + i;\
      end\
      temp_tiers[i] = tier;\
    end\
    local temp_counts = {};\
    for input in counts:gmatch("%S+") do\
      local count = tonumber(input);\
      if not count then\
        util.error.name = "component count";\
        return util.print_error();\
      end\
      temp_counts[1 + #temp_counts] = count;\
    end\
    if #temp_counts ~= 1 and #temp_counts ~= recipe_target.tiers then\
      util.error.name = "component_counts";\
      util.error.component_mismatch = true;\
      util.error.mismatched_element = "counts"\
      util.error.target_elements = recipe_target.tiers;\
      util.error.obtained_elements = #temp_counts;\
      return util.print_error();\
    end\
    for i = #temp_counts + 1, target_recipe.tiers do\
      temp_counts[i] = temp_counts[i - 1];\
    end\
    \
     --[[/*\
         * Finally, merge the two expanded lists and distribute\
         * the results across the recipes for each tier.\
         * \
         * These recipes are "reversed", in the sense that\
         * they don't describe how to make each item, but rather\
         * all the items that this one can be used to help make.\
         * \
         * It's this reversed list that is needed\
         * for computing the material needs when crafting.\
        */]]\
    \
    local recipes = factory.recipes;\
    local offset = recipe_target.id * 10 - 1;\
    for i = 1, recipe_target.tiers do\
      local tier = temp_tiers[i];\
      local count = temp_counts[i];\
      \
       --[[/*\
           * Due to the negative tier convention by d0sboots\
           * tiers smaller than 1 can happen naturally\
           */]]\
      if count > 0 and tier > 0 then\
        \
         --[[/*\
             * This check ensures only tiers from 1 to 10 are\
             * computed, as negative tiers do not exist\
             * \
             * now, we make sure our temp_tier isn't bigger\
             * than what the component can manage\
            */]]\
        \
        if tier > component.tier then\
          util.error.name = "component tier";\
          util.error.compare = true;\
          util.error.compare_min = -1;\
          util.error.compare_max = component.tier;\
          return util.print_error();\
        end\
        local index = component.id * 10 - 1;\
        local comp = recipes[index];\
        if not comp then\
          comp = {};\
          recipes[index] = comp;\
        end\
        comp[1 + #comp] = offset + i;\
        comp[1 + #comp] = count;\
        local recipe_item = recipe_target.recipe[i];\
        recipe_item[1 + #recipe_item] = index;\
        recipe_item[1 + #recipe_item] = count;\
      end\
    end\
  end\
  function factory.define_produce(name, parent, cost, machine)\
  end\
 \
  \
  function factory.add_category(name, default, first, last)\
    local category = {};\
    \
    category.id = 1 + #factory.categories;\
    local fields = table.pack("default", "first", "last");\
    local args = table.pack(default, first, last);\
    category.name = name:gsub(" ", "");\
    \
    for i = 1, #fields do\
      local trimmed = args[i]:gsub(" ", "");\
      local item = factory.item_names[trimmed];\
      if not item then\
        util.error.name = "category parameter"\
        util.error.category = true;\
        util.error.category_field = trimmed\
        return util.print_error();\
      end\
      local field = fields[i];\
      category[field] = item;\
    end\
    factory.categories[category.id] = category;\
  end\
)}

; 
; Helper Macros
; 

; 
; Mathod to communicate with the compactor to add an item
; Used by other macros for easier definitions
#add_item(name, tiers, game_name, type) {lua(return factory.add_item(\
  "{name}",\
  {tiers},\
  {game_name},\
  {type}\
))}

; 
; Mathod to add an item that's inside of the craft function
#craft(name, tiers, game_name) {add_item(\
  {name},\
  {tiers},\
  {game_name},\
  "craft"\
)}

; 
; Mathod to add an item that's inside of the produce function
#produce(name, tiers, game_name) {add_item(\
  {name},\
  {tiers},\
  {game_name},\
  "produce"\
)}

; 
; Method to group items together
; this items game_name doesn't exist so
; for ease of understanding, it's marked as
; the items name .group
; 
; in d0s's factory AI, this was ore because of
; a game bug that has since been fixed
#group(name, tiers) {add_item(\
  {name},\
  {tiers},\
  "{name}.group",\
  "group"\
)}

; 
; Mathod to add a *special* item
; special items are for internal use, and do not show on UI
#special(name, tiers, game_name) {add_item(\
  {name},\
  {tiers},\
  {game_name},\
  "special"\
)}

; 
; Method to declair a recipe
#recipe(name) {lua(return factory.define_recipe([[{name}]]))}

; 
; Method to declair a recipe component
; for making an item defined as craft
#component(tiers, name, count) {lua(return factory.add_component(\
  [[{tiers}]],\
  [[{name}]],\
  [[{count}]]\
))}

; 
; Method to declair the requirements of
; making an item defined as produce
#to_produce(item, source, cost, machine) {lua(\
  return factory.define_produce(\
    "{item}",\
    "{source}",\
    {cost},\
    "{machine}"\
  );\
)}

; 
; Method to add a category
#category(name, default, first, last) {lua(return factory.add_category(\
  "{name}",\
  "{default}",\
  "{first}",\
  "{last}"\
))}

