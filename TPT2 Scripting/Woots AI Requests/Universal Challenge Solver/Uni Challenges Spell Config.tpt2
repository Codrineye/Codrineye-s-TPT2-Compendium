:import Cods Blueprint Compactor
:name Spell Config
; 
; Welcome to the configuration
; This script has macros that allow you to
; communicate with the compactor and its debugger
; 
; Please read the compactor manual on the repo for a better
; understanding of how to use it
; 
{spell_debug.log(false)}
; Set to true if you want to get a log of your recording
; 
{spell_debug.can_halt(false)}
; Set to true if you want to create a 'breakpoint'
; Setting it to true also enables logging implicitly
; 
{spell_debug.recordings_before_halt(2)}
; Set the number of spells you can record
; before the recording system halts.
; It does nothing if can_halt is false 
; 
{spell_debug.display_spells(false)}
; Set to true if you want to display your spells
; You will see them as an error message to the right
; 
{spell_debug.display_format('\n|')}
; Set the string that'll be used to format your spells
; This is only used if display_spells is set to true
; 
; Lastly <spell_debug.add_breakpoint>
; as its name implies, you use it to add a breakpoint
; it sets display_spells to true and halts the program at that point
; so that you can see the current state of the script

; 
; For recording a blueprint, you have the following
; 4 macros
; 
; recorded_blueprint(blueprint_name, loopable_blueprint)
; Is used after a recording sequence to define a blueprint
; 
; It returns a const int variable
; called "blueprint_<blueprint_name>"
; that holds an index for you to use in a substring to extract
; the desired blueprint
; 
; blueprint_name is just any string. You do not include the double quotes
; loopable_blueprint is a true/false value
; if true, it makes the compactor execute the recording sequence on loop
; 
; timer_modulo(modulo)
; Should be used before you use recorded_blueprint to define a
; blueprint that can loop
; 
; this modulo value is used to 
; 
; synchronize(spell_ammount) 
; it makes the following spell_ammount recordings
; get used on the same gametick
; 
; onto the add_spell.<spell_type> functions
; they all require the spell ID, which you can obtain
; by importing a script that uses the modules you want
; 
; These functions also return a const int spell_<spell_number>
; holding the current ammount of space in your recording after
; the addition of the new spell
; 
; add_spell.instant(spell_name, timer)
; spell_name is the active modules ID.
; timer is the time at which you'd like the spell to be used
; 
; add_spell.grounded(spell_name, timer, coord_x, coord_y);
; Same as add_spell.instant but you now define the x/y coordinates
; you want the spell to be cast at
; 
; There's a little wrinkle with add_spell.instant
; that treates instant spells as grounded spells
; that are placed at position 0.0 0.0
; 

; All recorded spells get concatenated into the const string
; `recorded_actives` with its length being stored in the const int
; `recording_size`

; ===================================================================== ; 
; -------------------------> START RECORDING <------------------------- ; 
; ===================================================================== ; 

; bp 1-1
; bp 1-2
; bp 1-3
; bp 1-4
{add_spell.grounded(spell.toxicivy, 0.0, 0.0, 0.0)}
{recorded_blueprint(c1_5, true)}
; bp 1-6

{add_spell.grounded(spell.firestorm, 0.0, 0.0, 0.0)}
{recorded_blueprint(c2_1, true)}
; bp 2-2
; bp 2-3
; bp 2-4
{add_spell.grounded(spell.toxicivy, 0.0, 0.0, 0.0)}
{add_spell.instant(spell.desperado, 5.0)}
{timer_modulo(30.0)}
{recorded_blueprint(c2_5, true)}
; bp 2-6

; bp 3-1
{add_spell.instant(focus.fire, 0.0)}
{timer_modulo(1e-5)}
{recorded_blueprint(c3_2, true)}
; bp 3-3
; bp 3-4
{add_spell.grounded(spell.toxicivy, 0.0, 0.0, 0.6)}
{timer_modulo(25.0)}
{recorded_blueprint(c3_5, true)}
; bp 3-6

; bp 4-1
; bp 4-2
; bp 4-3
; bp 4-4
; bp 4-5
{add_spell.instant(spell.recharge, 45.0)}
{recorded_blueprint(c4_6, false)}

; bp 5-1
{add_spell.instant(focus.water, 0.0)}
{timer_modulo(90.0)}
{recorded_blueprint(c5_2, true)}

{add_spell.grounded(spell.something, 0.0, 25.0, 25.0)}
{recorded_blueprint(c5_3S, false)}
{add_spell.grounded(spell.something, 0.0, 5.0, 5.0)}
{add_spell.grounded(spell.something, 0.0, -5.0, 5.0)}
{add_spell.grounded(spell.something, 0.0, 5.0, -5.0)}
{add_spell.grounded(spell.something, 0.0, 0.0, 0.0)}
{recorded_blueprint(c5_3L, true)}
; open the modules menu
; {pos.relative(0.0, 250.0 / 450.0, 0.0, 0.5)}
; click on buy x1 button
; {pos.relative(180.0/1280.0, 42.0/720.0, 0, 0)}
; 
; buy granite foundation
; {pos.relative(160.0 / 1280.0, 580.0 / 720.0, 0, 1)}
; loop until granite foundation bought
; 
; {pos.relative(160.0 / 1280.0, 480.0 / 720.0, 0.0, 1.0)}
; buy adaptive regen
; {pos.relative(160.0 / 1280.0, 380.0 / 720.0, 0.0, 1.0)}
; buy ocean gift
; 
; must activate wave surge if wave() > 250

{add_spell.grounded(spell.toxicivy, 0.0, 0.0, 0.0)}
{recorded_blueprint(c5_4, true)}



; ===================================================================== ; 
; ----------------------------END RECORDING---------------------------- ;
; ===================================================================== ; 

{spell_debug}

; 
; String holding the recorded spell data
:const string recorded_actives {recorded_actives}

; 
; Int holding the size of the recorded string
; value is the same as return #Spell.comp.concat_actives() but
; the function version runs the concat operation one more time, which
; can get very expensive if you have a big recording sequence

:const int recoring_size {recording_size}
