:import Cods Spell Compactor:Universal Challenge Solver
:name Spell Config

; Welcome to the configuration
; This is the only area you have to make changes to
; Here you will configure the following properties
; *  what active modules you want to be used
; *  the order in which you want them to be used
; *  the timings of the activation
; *  and lastly
; *  if the module is placed, you will have to specify the coordinates
; 
; you have 4 functions at your disposal:
; All of these macros generate :const <type> <token> 'contents'
; 
; synchronize_module_activation()
; This macro will create a token sync<sync count> containing the value 'module_count - 1'
; You will need to specify the amount of modules you want to activate at this time and
; a delay to the activation
; This will make it so you have <module_count> sync scripts active at once
; The excess scripts will remove themselves after spell activation
; 
; add_batch()
; This macro will declare the end of one batch and the start of another
;   it's curently the only macro that returns a :const int, with the token being batch<batch count>
; A 'batch' means a sellection of modules so that you may separate module sequences
;   with only needing arithmetic operations
; By default you're in batch1, if you call for this macro you will move to batch2
;   by calling this macro, you change the string within sync created by <active_module_list> 
;   so that each batch has equal length
; 
; add_active_module.type()
; This macro will create a token spellname<spell count> containing the following values
; 'spell_timer' . 'coord_x' . 'coord_y' . 'attribute' . 'spell_name' . ';'
; 
; add_active_module.instant()
; The first type of addition, where you need to specify the spell name and the timer
; coord_x and coord_y are 0.0 and the attribute is 'instant '
; the extra ' ' is there for consistent spacing
; 
; add_active_module.grounded()
; The second type of addition, where you need to specify everything field
; The field meaning spell_name, spell_timer, coord_x and coord_y
; the attribute for it is 'grounded'
; 
; I do not recommend defining a ground module as an instant module nor vice versa
; the system will accept your input, but you will not cast anything

; 1-1
{add_batch}
; 1-2
{add_batch}
; 1-3
{add_batch}
; 1-4
{add_batch}
; 1-5
{add_active_module.grounded(spell.toxicivy, 0.0, 0.0, 0.0)}
{add_batch}
; 1-6
{add_batch}

; 2-1
{add_active_module.instant(spell.firestorm, 0.0)}
{add_batch}
; 2-2
{add_batch}
; 2-3
{add_batch}
; 2-4
{add_batch}
; 2-5
{add_active_module.grounded(spell.toxicivy, 0.0, 0.0, 0.0)}
{add_active_module.instant(spell.desperado, 0.0)}
{add_batch}
; 2-6
{add_batch}

; 3-1
{add_batch}
; 3-2
{add_active_module.instant(focus.fire, 0.0)}
{add_batch}
; 3-3
{add_batch}
; 3-4
{add_batch}
; 3-5
{add_active_module.grounded(spell.toxicivy, 0.0, 0.0, 0.0)}
{add_batch}
; 3-6
{add_batch}

; 4-1
{add_batch}
; 4-2
{add_batch}
; 4-3
{add_batch}
; 4-4
{add_batch}
; 4-5
{add_batch}
; 4-6
{add_batch}

; 5-1
{add_batch}
; 5-2
{add_active_module.instant(focus.water, 0.0)}
{add_batch}
; 5-3
{add_batch}
; 5-4
{add_active_module.grounded(spell.toxicivy, 0.0, 0.0, 0.0)}
{add_batch}
; 5-5
{add_active_module.instant(spell.frostnova, 0.0)}
{add_active_module.instant(spell.response.neutral, 0.0)}
{add_batch}


; These are the constants you'll be dealing with
; It's more convenient to put them at the end of this file rather than copy them

:const int spells_count {lua(return #spell.active_module.module_instance)}

:const int sync_precision {lua(return spell.sync_precision)}
:const int time_precision {lua(return 2 + spell.timer_precision)}
:const int placement_precision {lua(return 2 + spell.placement_precision)}
:const int attribute_size {lua(return spell.attribute_size)}

:const int batch {lua(return spell.batch_max_size)}
:const int increment {lua(return spell.max_name_size)}

