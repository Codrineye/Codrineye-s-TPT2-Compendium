:name bigman4X
:budget_cap 201
; we use the budget here to prevent
; a race condition from going through
; 
; if 2 instances are set to start

#start x
#gift_up p
#gift_down o

#config c
#up t
#down g
#left f
#right h


wakeup()

key.{start}()
key.{gift_up}()
key.{gift_down}()

key.{config}()
key.{up}()
key.{down}()
key.{left}()
key.{right}()


:const string gift_name '<size=0>gift coord'

:const double gift_slot_1 460.0
:const double gift_slot_2 580.0
:const double gift_slot_3 700.0
:const double gift_coord_y 300.0

:const double gift_slot_increment 120.0
; These are the values related to gift slots
; 

:const double rebuy_slot_1 565.0
:const double rebuy_slot_2 695.0
:const double rebuy_coord_y 250.0

:const double rebuy_slot_increment 100.0
; These are the values related to the rebuy slots
; 

:const double combine_slot_1 405.0
:const double combine_slot_2 470.0
:const double combine_slot_3 535.0

:const double combine_slot_result 600.0
; The combine slots

:const double combine_button 680.0
; The combine button

:const double combine_coord_y 180.0
; The y coord of every element related to combine

:const double combine_slot_increment 65.0
; These are values related to the combine slots
; 

:const double inv_coord_x 404.0
:const double inv_coord_y 115.0

:const double inv_slot_offset 29.75
#inv_point_to_corner vec(13.5, 13.5)

:const double inv_border_size 25.0
:const double inv_slot_size 23.0

:const string target_color '#0F6'
; These are values related to the selection square


:local vector buyer
:local double combine_coord

:global double inventory
:local vector inv_slot

:global bool config

:local string target.gift
:local string gift_info
:global string buy_gift

; helper macro to detect if an impulse
; is contained inside of the string <str>

#contains.key(key) contains(impulse(), "key.{key}")

; const values for impulse groups
:const string actions 'key.{start}key.{config}wakeup'

global.double.set(gift_name, min(2.0, max(0.0, if(\
  contains(actions, impulse()) || config,\
  global.double.get(gift_name),\
  if(\
    {contains.key({gift_down})},\
    global.double.get(gift_name) + 1.0, \
    global.double.get(gift_name) - 1.0\
  )\
))))

buyer = vec(\
  gift_slot_3 - gift_slot_increment * global.double.get(gift_name), \
  gift_coord_y\
)

config = (config && not({contains.key({start})})) != {contains.key({config})}

; we perform a substring to get our modification
; key. = 4 => sub(impulse(), 4, 1) to get our keypress
; key.{up} = inventory - 12.0
; key.{down} = inventory + 12.0
; key.{left} = inventroy - 1
; key.{right} = inventory + 1

:const string inv_str "-12.0+12.0-1.00+1.00"
:const string inv_keys "{up}{down}{left}{right}{config}{gift_up}{gift_down}"
inventory = if(\
  contains(impulse(), "wakeup"), \
  36.0, \
  max(0.0, min(47.0, inventory + s2d(\
    sub(\
      inv_str, \
      if(config, 5 * index(inv_keys, sub(impulse(), 4, 1), 0), 2), \
      5\
    ), \
    0.0\
  )))\
)

inv_slot = vec(\
  inv_coord_x + inv_slot_offset * ((inventory) % 12.0),\
  inv_coord_y - inv_slot_offset * floor(inventory / 12.0)\
)

target.gift = if(x(buyer) == gift_slot_1, "red gift", if(\
  x(buyer) == gift_slot_2, \
  "green gift", \
  "blue gift"\
))

gift_info = if(\
  not(contains(impulse(), "wakeup")) && (config && contains(buy_gift, "<br>")) ||\
  ({contains.key({config})} && config || {contains.key({start})}), \
  if(\
    config, \
    "<br><mark=#00000050>" . \
      "config enabled, press " . \
      "<color=" . target_color . ">{start}/{config}</color>" . \
      " to <color=red>stop</color>" . \
      "<br>" .\
      "<color=" . target_color . ">{up}/{down}</color>" . \
      " to change row" . \
      "<br>" . \
      "<color=" . target_color . ">{left}/{right}</color>" . \
      " to change inv slot" .\
    "</mark>", \
    "<br>combining with <color=#000>" . target.gift . "</color>"\
  ),\
  ""\
)

buy_gift = i2s(25 + len(target.gift)) . "</size>" . \
  "script will buy " . target.gift . gift_info

gotoif(config_sequence, not({contains.key({start})}))

buy_sequence:

:local int buy
:local int combine
:local int rebuy

buy_loop:

; because we'll only ever be rebuying on the last combine
; we'll change the buyer to represent the rebuy_coord instead
; of buying a new gift
; 
; by making this change, we'll also be able to use this loop
; for the final combine instead of making a new loop at the end
; 
; This is an arithmetical change
; if rebuy is 0, we will never decrease buyer
; but when rebuy grows to 1, we will only buy
; the newest gift sold once buy = 2, aka the final rebuy
buyer = buyer - vec(\
  rebuy_slot_increment * floor(i2d(rebuy * buy / 2)), \
  0.0\
)\

; we also change the location of our combine coord
; if buy == 0, this returns combine_slot_1
combine_coord = if(\
  rebuy == 0,\
  combine_slot_1 + (combine_slot_increment * i2d(buy)), \
  combine_slot_3 - (combine_slot_increment * i2d(buy))\
)

{click.relative(x(buyer) / 800.0, y(buyer) / 450.0, 1.0, 0.5)}
; buy selected gift

{click.relative(x(inv_slot) / 800.0, y(inv_slot) / 450.0, 1.0, 0.5)}
; click on the inventory slot

final_combine:
{click.relative(combine_coord / 800.0, 180.0 / 450.0, 1.0, 0.5)}
; put it in combine slot

; increment our buy count
; this keeps track of how many items we have bought
buy = (buy + 1) % 3

gotoif(buy_loop, buy > 0)

{click.relative(680.0 / 800.0, 180.0 / 450.0, 1.0, 0.5)}
; we click the button to combine the input

{click.relative(600.0 / 800.0, 180.0 / 450.0, 1.0, 0.5)}
; we take the output outsode of our combine slot 

; we want to sell every gift appart from the last one
gotoif(no_sell, combine == 2 || rebuy == 1)

{click.relative(410.0 / 800.0, rebuy_coord_y / 450.0, 1.0, 0.5)}
; and we sell it to make space for the next combine sequence

no_sell:
; we've got 3 combines and a final combine
; this counter keeps track of our combines
combine = (combine + 1) % 3

; this makes sure to never set rebuy back to 0
; this works because the default value of an int is 0
rebuy = max(rebuy, 1 - combine)

; and this ensures buyer becomes rebuy_slot_2 only when
; we're doing the final combine
buyer = if(rebuy == 0, buyer, vec(rebuy_slot_2, rebuy_coord_y))


; this gotoif() ensures we exit after the final comine
gotoif(if(rebuy == 0, buy_loop, final_combine), rebuy - combine != 0)

end:

; end the combine sequence

{click.relative(x(inv_slot) / 800.0, y(inv_slot) / 450.0, 1.0, 0.5)}
; buy back the last bought present

{click.relative(735.0 / 800.0, 140.0 / 450.0, 1.0, 0.5)}
; and unwrap all presents

; finally, we tell the user that the script has finished
; so we remove our information text

buy_gift = sub(buy_gift, 0, s2i(sub(buy_gift, 0, 2), 0))


config_sequence:

inv_slot = inv_slot - {inv_point_to_corner}

canvas.clear()
canvas.rect(\
  {pos.relative(x(inv_slot) / 800.0, y(inv_slot) / 450.0, 1.0, 0.5)}, \
  {pos.relative(inv_border_size / 800.0, inv_border_size / 450.0, 0.0, 0.0)}, \
  "#000"\
)
canvas.rect(\
  {pos.relative((x(inv_slot) + 1.0) / 800.0, (y(inv_slot) + 1.0) / 450.0, 1.0, 0.5)}, \
  {pos.relative(inv_slot_size / 800.0, inv_slot_size / 450.0, 0.0, 0.0)}, \
  target_color . "5"\
)
