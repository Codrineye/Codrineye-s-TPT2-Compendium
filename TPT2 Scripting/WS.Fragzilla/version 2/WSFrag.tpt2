:import WS.Fragzilla_lib
; we import the library
; it's pretty bland, but it's still nice organization

:budget_cap -1
:name {package(WSFrag)}
; set the script to run as fast as possible and
; set its name

:local double cooldown
:local int hammer_count
:local int remClicks

key.f()
key.h()

; local doubles for the user to configure the script
; cooldown is how much time to wait in the idle screen
cooldown = 1.1

; hammer_count is how many times the script
; should click the hammer before going back on cooldown
hammer_count = 1

; 
; we start the script by determening the state
; if all windows are closed, we toggle our status
; otherwise, the status is always off
; 
; this is a clean script shut down/wakeup operation

{status.set(if(contains(impulse(), "key.h"), "", if(\
  anyopen() || {script_active}, \
  {status.off}, \
  {status.on}\
)))}

; blocker condition that ensures we only
; interact with the game when we can
goto(if({script_active}, hammer, quit))

hammer:
; this is the hammer chunk
; if the user has activated the script
; then we must already be on floor 2

show("workshop", true)
; we enter the workshop, as that's where the hammer button is

waitframe()
; and wait a frame for the action to be performed

remClicks = hammer_count
; now, create a copy of the hammer_count and
; enter the hammering loop

hammer_time:
remClicks = remClicks - 1

{click.relative(720.0/800.0, 40.0/450.0, 0.5, 0.5)}
waitframe()

; we click in the location of the hammer button
; and wait a frame so that the operation is processed

gotoif(hammer_time, remClicks > 0)
; we keep itterating until remClicks is <= 0

show("workshop", false)
waitframe()
; then, end this chunk by exiting the workshop
; and waitframe() for the action to be processed

goto(if({script_active}, farm, quit))
; a secondary blocker to ensure we are still
; alowed to interact with the game

farm:
; this is the farm chunk
; while in here, we wait in the idle screen
; for our cooldown to run out

show("towertesting", true)
waitframe()
; to enter idle mode, we must have
; the towertesting window open

{click.relative(90.0/800.0, 35.0/450.0, 0.0, 0.0)}
wait(cooldown)
; and we click on the position where the button that
; opens the idle screen is shown
; 
; because it's useless for the cooldown to be 0.0
; wait(0.0) moves so fast that the click isn't registered
; (unless you have a budget <= 100)
; so we can exit towertesting without any issues

show("towertesting", false)
waitframe()

; and the end of the hammer chunk ensures we return to hammer
; only if the script isn't shut down
gotoif(hammer, {script_active})

quit: